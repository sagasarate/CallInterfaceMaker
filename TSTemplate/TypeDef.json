[
    {
        "Name": "bool",
        "CType": "boolean",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberBoolean(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.toBoolean();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(1)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tBoolean.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"boolean\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"boolean\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable> = false;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<Type>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "char",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberSbyte(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(1)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tSByte.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "short",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberShort(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(2)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tInt16.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "int",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberInt(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(4)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tInt32.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "BYTE",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberByte(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(1)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tByte.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "WORD",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberUshort(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(2)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt16.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "UINT",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberUint(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(4)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt32.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "INT64",
        "CType": "Long",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberLong(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.toLong();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(8)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tInt64.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>.toString();</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>.toString());</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"string\")\r\n{\r\n    <Variable> = Long.fromString(StructNode[\"<VariableName>\"]);\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"string\")\r\n{\r\n    <Variable> = Long.fromString(ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=Long.ZERO;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=Long.fromValue(<RightValue><Variable>);\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Long.fromValue(Value);\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>.toString());",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "UINT64",
        "CType": "Long",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberLong(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.toLong();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(8)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt64.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>.toString();</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>.toString());</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"string\")\r\n{\r\n    <Variable> = Long.fromString(StructNode[\"<VariableName>\"]);\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"string\")\r\n{\r\n    <Variable> = Long.fromString(ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=Long.UZERO;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=Long.fromValue(<RightValue><Variable>);\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Long.fromValue(Value);\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>.toString());",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "String",
        "CType": "string",
        "Flag": 192,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberString(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.toString();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetStringMemberSize(<Variable>)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"string\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"string\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=\"\";",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<Type>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "CSmartStruct",
        "CType": "CSmartStruct",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberStruct(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>.CloneFrom(<PacketMember>.toSmartStruct());",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetStructMemberSize(<Variable>.GetDataLen())",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=new CSmartStruct();",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>.CloneFrom(<RightValue><Variable>);\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(PropertyGridTools.StructToString(<Variable>, \"<Type>\"));",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "OBJECT_ID",
        "CType": "Long",
        "Flag": 0,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberLong(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.toLong();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(8)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ID.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt64.TryParse(Attr<VariableName>.Value,out <Variable>.ID);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>.toString();</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>.toString());</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"string\")\r\n{\r\n    <Variable> = Long.fromString(StructNode[\"<VariableName>\"]);\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"string\")\r\n{\r\n    <Variable> = Long.fromString(ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=Long.UZERO;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=Long.fromValue(<RightValue><Variable>);\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Long.fromValue(Value);\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"UINT64\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "float",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberFloat(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(4)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "ByteArray",
        "CType": "Uint8Array",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberBinary(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "const SrcData = <PacketMember>.toBinary();\r\n<Variable> = new Uint8Array(SrcData.length);\r\n<Variable>.set(SrcData );",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetBinaryMemberSize(<Variable>.length)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=new Uint8Array(1);",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>.slice();\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value.slice();\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(PropertyGridTools.StructToString(<Variable>, \"<Type>\"));",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "TimeStamp",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberUint(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(4)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt32.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IfNotArray>StructNode[\"<VariableName>\"]=<Variable>;</IfNotArray>\r\n<IfArray>ArrayNode.push(<Variable>);</IfArray>",
            "FromJsonOperation": "<IfNotArray>if(typeof(StructNode[\"<VariableName>\"]) == \"number\")\r\n{\r\n    <Variable> = StructNode[\"<VariableName>\"];\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfNotArray>\r\n<IfArray>if(typeof(ArrayElementNode) == \"number\")\r\n{\r\n    <Variable> = ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}</IfArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"UINT\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "CSmartArray",
        "CType": "CSmartArray",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberArray(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>.CloneFrom(<PacketMember>.toSmartArray());",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetArrayMemberSize(<Variable>.GetDataLen())",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=new CSmartArray();",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>.CloneFrom(<RightValue><Variable>);\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(PropertyGridTools.StructToString(<Variable>, \"<Type>\"));",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "double",
        "CType": "number",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMemberDouble(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.valueOf();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(8)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(<Variable>);",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "Variant",
        "CType": "any",
        "Flag": 192,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray><SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>.toAny();",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetVariedMemberSize(<Variable>)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Variable>: <Type>",
            "InitOperation": "<Variable>=null;",
            "CloneOperation": "<IfInDataObject>if(!Flag.and(<ModifyFlagEnumName>.<ModifyFlag>).equals(0))</IfInDataObject>\r\n{\r\n\tif(<RightValue><Variable>)\r\n\t{\r\n\t\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t\t<IfInDataObject><IfUpdateMF>UpdateFlag = UpdateFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF></IfInDataObject>\r\n\t}\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public get <VariableName>(): <Type>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public set <VariableName>(Value: <Type>)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>this.m_ModifyFlag = this.m_ModifyFlag.or(<ModifyFlagEnumName>.<ModifyFlag>);</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "PropertyGridTools.ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>null</HaveExtendType>)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "Cols[0].push(\"<VariableName>\");\r\nCols[1].push(\"<OrginType>\");\r\nCols[2].push(<Description>);",
            "CheckXLSColumnOperation": "if(!PropertyGridTools.CheckXLSColumn(Sheet, \"<VariableName>\", MsgPrefix))\r\n\treturn false;",
            "ToXLSOperation": "Cols.push(PropertyGridTools.StructToString(<Variable>, \"<Type>\"));",
            "FromXLSOperation": "if (Sheet.getColumnKey(\"<VariableName>\")) {\r\n    let Str = Sheet.getRow(Row).getCell(\"<VariableName>\").text;\r\n\tlet Value = PropertyGridTools.StringToStruct(Str, \"<OrginType>\", false);\r\n\tif(Value !== undefined)\r\n\t\t<Variable> = Value;\r\n\telse\r\n\t\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]解析失败`;\r\n}\r\nelse{\r\n\treturn `${MsgPrefix}的行[${Row}]的列[<VariableName>]不存在`;\r\n}",
            "FormatSpecOperation": ""
        }
    }
]