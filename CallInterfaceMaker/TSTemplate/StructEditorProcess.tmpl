public static CreateListHeader(ListCtrl: any, StartIndex: number): boolean
{
	<IfHaveBaseClass>
	if (!super.CreateListHeader(ListCtrl, StartIndex))
		return false;
	</IfHaveBaseClass>
	<CreateListHeaderOperations>
	return true;
}
public FillListItem(ListCtrl: any, Item: number, StartIndex: number): number
{
	<IfHaveBaseClass>
	StartIndex = super.FillListItem(ListCtrl, Item, StartIndex);
	if (StartIndex < 0)
		return StartIndex;
	</IfHaveBaseClass>
		
	<FillListItemOperations>
	return StartIndex;
}
public FillPropertyGrid(PGNode: any): number
{
	<IfHaveBaseClass>
	if (!<BaseClass>::FillPropertyGrid(PGNode) < 0)
		return -1;
	</IfHaveBaseClass>
	
	let BindParent = null;
	<PropertyGridFillOperations>
	PGNode.expanded = true;
	return 0;
}
public static FillPropertyGridByBindData(PGNode: any, BindData: any[], BindDataType : string, StartIndex: number, MemberID: number): number
{
	let FillCount = 0;
	<IfHaveBaseClass>
	FillCount = super.FillPropertyGridByBindData(PGNode, BindData, StartIndex, MemberID);
	if (FillCount < 0)
		return -1;
	</IfHaveBaseClass>
	PropertyGridTools.ResizeArray(BindData, BindDataType, StartIndex + FillCount + <BindDataLen>);
	
	let BindParent = null;
	<PropertyGridBindDataFillOperations>
	PGNode.expanded = true;
	return FillCount;
}
