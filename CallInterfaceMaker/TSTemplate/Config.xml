<?xml version="1.0" encoding="utf-8"?>
<Config>
	<OneFileExport IsExport="true" FileExt="ts"/>
	<InterfaceHeaderExport IsExport="false" FileExt="cs"/>
	<StructExport IsExport="true" FileExt="cs"/>
	<EnumExport IsExport="true" FileExt="cs"/>
	<ConstExport IsExport="true" FileExt="cs"/>
	<DataStructHeaderExport IsExport="false" FileExt=""/>
	<InterfaceExport IsExport="true" FileExt="cs"/>
	<CallHeaderExport IsExport="false" FileExt=""/>
	<CallSourceExport IsExport="true" FileExt="cs"/>
	<HandlerHeaderExport IsExport="false" FileExt=""/>
	<HandlerSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectHeaderExport IsExport="false" FileExt=""/>
	<DataObjectSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectModifyFlagsHeaderExport IsExport="false" FileExt=""/>
	<DataObjectModifyFlagsSourceExport IsExport="true" FileExt="cs"/>
	<DefaultStructGenerateOperations PackOperation="let SubPacket=&lt;Packet&gt;.PrepareSubStruct();&#13;&#10;&lt;IfNotDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket))&#13;&#10;&tab;FailCount++;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;))&#13;&#10;&tab;FailCount++;&lt;/IfDataObject&gt;&#13;&#10;&lt;Packet&gt;.FinishMember(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;SubPacket.GetDataLen());" UnpackOperation="&lt;IfNotDataObject&gt;&lt;Variable&gt;.ParsePacket(&lt;PacketMember&gt;.toSmartStruct());&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&lt;Variable&gt;.ParsePacket(&lt;PacketMember&gt;.toSmartStruct(),&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;" SizeCaculateOperation="&lt;IfNotDataObject&gt;&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStructMemberSize(&lt;Variable&gt;.GetSmartStructSize())&lt;/IfNotDataObject&gt;&lt;IfDataObject&gt;&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStructMemberSize(&lt;Variable&gt;.GetSmartStructSize(&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;))&lt;/IfDataObject&gt;" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="let DataNode = {};&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;&lt;Variable&gt;.ToJson(DataNode);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;&lt;Variable&gt;.ToJson(DataNode, &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;] = DataNode;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.push(DataNode);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;let DateNode = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(DateNode != null &amp;&amp; DateNode != undefined)&#13;&#10;{&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(DateNode, &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(DateNode);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(typeof(ArrayElementNode) == &quot;object&quot;)&#13;&#10;{&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(ArrayElementNode, &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(ArrayElementNode);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;&#13;&#10;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;=new &lt;Type&gt;()" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;IfNotDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&tab;&lt;IfDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value.Clone();&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildGroup(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Type&gt;.FillPropertyGridByBindData, BindData, StartIndex + FillCount,&#13;&#10;&tab;MemberID, StartIndex + FillCount, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildGroup(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;,  function(PGNode: any, Info: &lt;Type&gt;){return Info.FillPropertyGrid(PGNode);}, &#13;&#10;&tab;&lt;Variable&gt;, 0, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt; + &quot;\n&quot; + PropertyGridTools.GetAdditionalDesc(&quot;&lt;VariableName&gt;&quot;, &quot;&lt;Type&gt;&quot;, false));" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(PropertyGridTools.StructToString(&lt;Variable&gt;, &quot;&lt;Type&gt;&quot;));" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value !== undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<DefaultEnumGenerateOperations PackOperation="if(!&lt;Packet&gt;.AddMemberInt(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(4)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&lt;IfNot64Bit&gt;Attr&lt;VariableName&gt;.Value = ((uint)&lt;Variable&gt;).ToString();&lt;/IfNot64Bit&gt;&#13;&#10;&lt;If64Bit&gt;Attr&lt;VariableName&gt;.Value = ((ulong)&lt;Variable&gt;).ToString();&lt;/If64Bit&gt;&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="&#13;&#10;&lt;If64Bit&gt;&lt;/If64Bit&gt;&#13;&#10;XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;&lt;IfNot64Bit&gt;&#13;&#10;&tab;uint ParseTemp = 0;&#13;&#10;&tab;Int32.TryParse(Attr&lt;VariableName&gt;.Value,out ParseTemp);&#13;&#10;&tab;&lt;Variable&gt; = ParseTemp;&#13;&#10;&tab;&lt;/IfNot64Bit&gt;&#13;&#10;&tab;&lt;If64Bit&gt;&#13;&#10;&tab;ulong ParseTemp = 0;&#13;&#10;&tab;Uint64.TryParse(Attr&lt;VariableName&gt;.Value,out ParseTemp);&#13;&#10;&tab;&lt;Variable&gt; = ParseTemp;&#13;&#10;&tab;&lt;/If64Bit&gt;&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="&lt;HaveStrTrans&gt;&lt;Type&gt;_UTILS.ToStr(&lt;Variable&gt;)&lt;!HaveStrTrans&gt;PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)&lt;/HaveStrTrans&gt;" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;PGNode.AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount],&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST,&tab;&lt;Type&gt;_UTILS.ToStr, MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;, &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST, &lt;Type&gt;_UTILS.ToStr, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;!IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;&lt;BeBind&gt;BindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;PGNode.AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount],&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST, &lt;Type&gt;_UTILS.ToStr, &lt;Type&gt;_UTILS.FromStr, MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;&lt;BeBind&gt;BindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;PGNode.AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST, &lt;Type&gt;_UTILS.ToStr, &lt;Type&gt;_UTILS.FromStr, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;/IsFlagEnum&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt; + &quot;\n&quot; + &lt;Type&gt;_UTILS.GetDescs());" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;UINT&quot;, false);&#13;&#10;&tab;if(Value !== undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<DefaultEnum64GenerateOperations PackOperation="if(!&lt;Packet&gt;.AddMemberLong(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toLong();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(8)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;.toString();&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;.toString());&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=Long.ZERO;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=Long.fromValue(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Long.fromValue(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="&lt;HaveStrTrans&gt;&lt;Type&gt;_UTILS.ToStr(&lt;Variable&gt;)&lt;!HaveStrTrans&gt;PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)&lt;/HaveStrTrans&gt;" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;PGNode.AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount],&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST,&tab;&lt;Type&gt;_UTILS.ToStr, MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;, &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST, &lt;Type&gt;_UTILS.ToStr, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;!IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;&lt;BeBind&gt;BindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;PGNode.AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount],&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST, &lt;Type&gt;_UTILS.ToStr, &lt;Type&gt;_UTILS.FromStr, MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;&lt;BeBind&gt;BindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;PGNode.AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;Type&gt;_UTILS.VALUE_LIST, &lt;Type&gt;_UTILS.ToStr, &lt;Type&gt;_UTILS.FromStr, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;/IsFlagEnum&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt; + &quot;\n&quot; + &lt;Type&gt;_UTILS.GetDescs());" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;UINT64&quot;, false);&#13;&#10;&tab;if(Value !== undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<ArrayDefineConfig PackOperation="&lt;IfCheckMF&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;let ArrayPacket = &lt;Packet&gt;.PrepareSubArray();&#13;&#10;&tab;&lt;IfIsBaseType&gt;ArrayPacket.AddArray(&lt;Variable&gt;, &quot;&lt;OrginType&gt;&quot;);&lt;/IfIsBaseType&gt;&#13;&#10;&tab;&lt;IfIsNotBaseType&gt;&lt;ChangePacketName=ArrayPacket&gt;for(let i=0;i&lt;&lt;Variable&gt;.length;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;PackOperation&gt;&#13;&#10;&tab;}&lt;/IfIsNotBaseType&gt;&#13;&#10;&tab;&lt;Packet&gt;.FinishMember(&lt;SST_NAME&gt;.&lt;SST_ID&gt;,ArrayPacket.GetDataLen());&#13;&#10;}" UnpackOperation="case &lt;SST_NAME&gt;.&lt;SST_ID&gt;:&#13;&#10;&tab;&lt;IfCheckMF&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfCheckMF&gt;&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=[];&#13;&#10;&tab;&tab;let ArrayPacket=&lt;PacketMember&gt;.toSmartArray();&#13;&#10;&tab;&tab;&lt;IfIsBaseType&gt;ArrayPacket.GetArray(&lt;Variable&gt;);&lt;/IfIsBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfIsNotBaseType&gt;let SubPos=ArrayPacket.GetFirstMemberPosition();&#13;&#10;&tab;&tab;while(SubPos.Pos&gt;0)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;let ArrayMember=ArrayPacket.GetNextMember(SubPos);&lt;ChangePacketMemberName=ArrayMember&gt;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;UnpackOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.push(ArrayElement);&#13;&#10;&tab;&tab;}&lt;/IfIsNotBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;UpdateFlag=UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;&tab;break;" SizeCaculateOperation="&lt;IfCheckMF&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfCheckMF&gt;&#13;&#10;&lt;IfCheckMF&gt;{&lt;/IfCheckMF&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&lt;IfIsFixLenType&gt;_PackSize += &lt;ArrayElementSize&gt;*&lt;Variable&gt;.length;&lt;/IfIsFixLenType&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&lt;IfIsVariableLenType&gt;for(let i=0;i&lt;&lt;Variable&gt;.length;i++)&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;{&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&tab;_PackSize += &lt;ArrayElementSize&gt;;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;}&lt;/IfIsVariableLenType&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;_PackSize += CSmartStruct.GetArrayMemberSize(0);&#13;&#10;&lt;IfCheckMF&gt;}&lt;/IfCheckMF&gt;" ToXMLOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;XmlNode NodeSaveArray=StructNode;&#13;&#10;&tab;XmlNode NodeArray=NodeSaveArray.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;NodeSaveArray.AppendChild(NodeArray);&#13;&#10;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;StructNode =  NodeArray.OwnerDocument.CreateElement(&quot;ArrayElement&quot;);&#13;&#10;&tab;&tab;NodeArray.AppendChild(StructNode);&#13;&#10;&tab;&tab;&lt;ToXMLOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode= NodeSaveArray;&#13;&#10;}" FromXMLOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;XmlNode NodeSaveArray=StructNode;&#13;&#10;&tab;XmlNode NodeArray= NodeSaveArray.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;if(NodeArray!=null)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;foreach(XmlNode ChildNode in NodeArray.ChildNodes)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;StructNode =  ChildNode;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromXMLOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;&tab;StructNode=NodeSaveArray;&#13;&#10;}" ToJsonOperation="&lt;IfCheckMF&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;let ArrayNode = [];&#13;&#10;&tab;for(let i=0;i&lt;&lt;Variable&gt;.length;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;ToJsonOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode[&quot;&lt;VariableName&gt;&quot;] = ArrayNode;&#13;&#10;}" FromJsonOperation="&lt;IfCheckMF&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;let ArrayNode = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;&tab;if(ArrayNode != null &amp;&amp; ArrayNode != undefined)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;for(let ArrayElementNode of ArrayNode)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromJsonOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.push(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;}" ReferenceDefine="&lt;Type&gt;[]" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;[]" InitOperation="&lt;Variable&gt;=[];" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt; instanceof Array)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;IfNotRefType&gt;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;.slice();&lt;/IfNotRefType&gt;&#13;&#10;&tab;&tab;&lt;IfRefType&gt;&lt;LeftValue&gt;&lt;Variable&gt;=[];&#13;&#10;&tab;&tab;for (let i = 0; i &lt; &lt;RightValue&gt;&lt;Variable&gt;.length;i++ )&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;IfNotDataObject&gt;ArrayElement.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;[i]);&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&tab;&tab;&lt;IfDataObject&gt;ArrayElement.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;[i], &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;&#13;&#10;&tab;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.push(ArrayElement);&#13;&#10;&tab;&tab;}&lt;/IfRefType&gt;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;[]&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;[])&#13;&#10;{&#13;&#10;&tab;&lt;IfNotRefType&gt;&lt;Variable&gt;= Value.slice();&lt;/IfNotRefType&gt;&#13;&#10;&tab;&lt;IfRefType&gt;&lt;Variable&gt;=[];&#13;&#10;&tab;for (let i = 0; i &lt; Value.length;i++ )&#13;&#10;&tab;{&#13;&#10;&tab;&tab;let ElementObject = Value[i];&#13;&#10;&tab;&tab;&lt;Variable&gt;.push(ElementObject.Clone());&#13;&#10;&tab;}&lt;/IfRefType&gt;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="&lt;Variable&gt;[&lt;Index&gt;]" ConstIndexOperation="&lt;Variable&gt;[&lt;Index&gt;]" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;HaveBindData&gt;&#13;&#10;PGNode.AddChildDynamicGroup(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;,&#13;&#10;&tab;&lt;InBindData&gt;&lt;BindParentType&gt;_UTILS.FillBindData, BindData, StartIndex + FillCount, MemberID, StartIndex + FillCount, 0, BindParent);&lt;!InBindData&gt;&#13;&#10;&tab; &lt;BindParentType&gt;_UTILS.FillBindData, &lt;Variable&gt;, 0, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, 0, BindParent);&lt;/InBindData&gt;&#13;&#10;&lt;!HaveBindData&gt;&#13;&#10;PGNode.AddChildGroup(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;,&#13;&#10;&tab;&lt;InBindData&gt;&#13;&#10;&tab;function(PGNode: any, BindData: any[], StartIndex: number, MemberID: number)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;let FillCount = 0;&#13;&#10;&tab;&tab;for(let i = StartIndex; i &lt; BindData.length; i++)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;PropertyGridFillOperation&gt;&#13;&#10;&tab;&tab;}&#13;&#10;&tab;&tab;return FillCount;&#13;&#10;&tab;}, BindData, StartIndex + FillCount, MemberID, StartIndex + FillCount);&#13;&#10;&tab;&lt;!InBindData&gt;&#13;&#10;&tab;function(PGNode: any, &lt;VariableName&gt;: &lt;Type&gt;[], StartIndex: number, MemberID: number)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;let FillCount = 0;&#13;&#10;&tab;&tab;for(let i = 0; i &lt; &lt;VariableName&gt;.length; i++)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;PropertyGridFillOperation&gt;&#13;&#10;&tab;&tab;}&#13;&#10;&tab;&tab;return FillCount;&#13;&#10;&tab;}, &lt;Variable&gt;, 0, &lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON |  PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON);&#13;&#10;&tab;&lt;/InBindData&gt;&#13;&#10;&#13;&#10;&lt;/HaveBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt; + &quot;\n&quot; + PropertyGridTools.GetAdditionalDesc(&quot;&lt;VariableName&gt;&quot;, &quot;&lt;Type&gt;&quot;, true));" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(PropertyGridTools.StructToString(&lt;Variable&gt;, &quot;&lt;Type&gt;&quot;));" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, true);&#13;&#10;&tab;if(Value !== undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<OtherConfig CommentPrefix="//" LocalVariableDefinePrefix="let " MemberVariablePrefix="this." DefaultPacketName="Packet" DefaultPacketMemberName="PacketMember" SupportBigInt="false" ForceExportAll="false"/>
</Config>
