<?xml version="1.0" encoding="utf-8"?>
<TypeDef>
	<Type Name="bool" CType="boolean" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberBoolean(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toBoolean();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(1)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Boolean.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;boolean&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;boolean&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt; = false;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;Type&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="char" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberSbyte(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(1)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;SByte.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="short" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberShort(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(2)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Int16.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="int" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberInt(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(4)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Int32.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="BYTE" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberByte(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(1)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Byte.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="WORD" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberUshort(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(2)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt16.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="UINT" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberUint(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(4)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt32.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="INT64" CType="Long" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberLong(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toLong();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(8)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Int64.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;.toString();&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;.toString());&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=Long.ZERO;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=Long.fromValue(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Long.fromValue(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;.toString());" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="UINT64" CType="Long" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberLong(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toLong();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(8)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt64.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;.toString();&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;.toString());&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=Long.UZERO;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=Long.fromValue(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Long.fromValue(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;.toString());" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="String" CType="string" Flag="192" PackOperation="if(!&lt;Packet&gt;.AddMemberString(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toString();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStringMemberSize(&lt;Variable&gt;)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=&quot;&quot;;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;Type&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="CSmartStruct" CType="CSmartStruct" Flag="196" PackOperation="if(!&lt;Packet&gt;.AddMemberStruct(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;.CloneFrom(&lt;PacketMember&gt;.toSmartStruct());" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStructMemberSize(&lt;Variable&gt;.GetDataLen())" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=new CSmartStruct();" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(PropertyGridTools.StructToString(&lt;Variable&gt;, &quot;&lt;Type&gt;&quot;));" FromXLSOperation=""/>
	<Type Name="OBJECT_ID" CType="Long" Flag="0" PackOperation="if(!&lt;Packet&gt;.AddMemberLong(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toLong();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(8)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ID.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt64.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;.ID);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;.toString();&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;.toString());&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;string&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = Long.fromString(ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=Long.UZERO;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=Long.fromValue(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Long.fromValue(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;UINT64&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="float" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberFloat(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(4)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="ByteArray" CType="Uint8Array" Flag="196" PackOperation="if(!&lt;Packet&gt;.AddMemberBinary(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="const SrcData = &lt;PacketMember&gt;.toBinary();&#13;&#10;&lt;Variable&gt; = new Uint8Array(SrcData.length);&#13;&#10;&lt;Variable&gt;.set(SrcData );" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetBinaryMemberSize(&lt;Variable&gt;.length)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=new Uint8Array(1);" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;.slice();&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value.slice();&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(PropertyGridTools.StructToString(&lt;Variable&gt;, &quot;&lt;Type&gt;&quot;));" FromXLSOperation=""/>
	<Type Name="TimeStamp" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberUint(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(4)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt32.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.push(&lt;Variable&gt;);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;if(typeof(StructNode[&quot;&lt;VariableName&gt;&quot;]) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;if(typeof(ArrayElementNode) == &quot;number&quot;)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;UINT&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="CSmartArray" CType="CSmartArray" Flag="196" PackOperation="if(!&lt;Packet&gt;.AddMemberArray(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;.CloneFrom(&lt;PacketMember&gt;.toSmartArray());" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetArrayMemberSize(&lt;Variable&gt;.GetDataLen())" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=new CSmartArray();" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(PropertyGridTools.StructToString(&lt;Variable&gt;, &quot;&lt;Type&gt;&quot;));" FromXLSOperation=""/>
	<Type Name="double" CType="number" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMemberDouble(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.valueOf();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(8)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(&lt;Variable&gt;);" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
	<Type Name="Variant" CType="any" Flag="192" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;.toAny();" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetVariedMemberSize(&lt;Variable&gt;)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Variable&gt;: &lt;Type&gt;" InitOperation="&lt;Variable&gt;=null;" CloneOperation="&lt;IfInDataObject&gt;if(!Flag.and(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;).equals(0))&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;if(&lt;RightValue&gt;&lt;Variable&gt;)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag = UpdateFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public get &lt;VariableName&gt;(): &lt;Type&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public set &lt;VariableName&gt;(Value: &lt;Type&gt;)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;this.m_ModifyFlag = this.m_ModifyFlag.or(&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;);&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="PropertyGridTools.ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;null&lt;/HaveExtendType&gt;)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], &#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;BindData[StartIndex + FillCount] = Value;&#13;&#10;&tab;&tab;},&#13;&#10;&tab;&tab;MemberID, StartIndex + FillCount, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_MENU_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_MENU_BUTTON&lt;/IfNotInArray&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;PGNode.AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;,&#13;&#10;&tab;&tab;function(Value : any){&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;&tab;}.bind(this),&#13;&#10;&tab;&tab;&lt;SST_NAME&gt;.&lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;, &lt;IfInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_ADD_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DEL_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_UP_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_DOWN_BUTTON | PROPERTY_GRID_GROUP_FLAG.PGGF_MENU_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;PROPERTY_GRID_GROUP_FLAG.PGGF_MENU_BUTTON&lt;/IfNotInArray&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="Cols[0].push(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Cols[1].push(&quot;&lt;OrginType&gt;&quot;);&#13;&#10;Cols[2].push(&lt;Description&gt;);" CheckXLSColumnOperation="if(!PropertyGridTools.CheckXLSColumn(Sheet, &quot;&lt;VariableName&gt;&quot;, MsgPrefix))&#13;&#10;&tab;return false;" ToXLSOperation="Cols.push(PropertyGridTools.StructToString(&lt;Variable&gt;, &quot;&lt;Type&gt;&quot;));" FromXLSOperation="if (Sheet.getColumnKey(&quot;&lt;VariableName&gt;&quot;)) {&#13;&#10;    let Str = Sheet.getRow(Row).getCell(&quot;&lt;VariableName&gt;&quot;).text;&#13;&#10;&tab;let Value = PropertyGridTools.StringToStruct(Str, &quot;&lt;OrginType&gt;&quot;, false);&#13;&#10;&tab;if(Value != undefined)&#13;&#10;&tab;&tab;&lt;Variable&gt; = Value;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]解析失败`;&#13;&#10;}&#13;&#10;else{&#13;&#10;&tab;return `${MsgPrefix}的行[${Row}]的列[&lt;VariableName&gt;]不存在`;&#13;&#10;}"/>
</TypeDef>
