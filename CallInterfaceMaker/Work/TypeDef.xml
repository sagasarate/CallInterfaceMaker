<?xml version="1.0" encoding="utf-8"?>
<TypeDef>
	<Type Name="bool" CType="bool" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(BYTE))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack(&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsBool())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetBool();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsBool())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetBool();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=false;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` TINYINT UNSIGNED NOT NULL" DBInsertFormatOperation="%u" DBPutOperation="&lt;Variable&gt; ? 1:0" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="char" CType="char" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(char))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((int)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsInt())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetInt();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsInt())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetInt();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` TINYINT NOT NULL" DBInsertFormatOperation="%d" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="short" CType="short" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(short))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((int)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsInt())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetInt();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsInt())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetInt();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` SMALLINT NOT NULL" DBInsertFormatOperation="%d" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="int" CType="int" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(int))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack(&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsInt())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetInt();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsInt())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; =ArrayElementNode.GetInt();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` INT NOT NULL" DBInsertFormatOperation="%d" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="BYTE" CType="BYTE" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(BYTE))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((UINT)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetUint();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsUint())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetUint();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` TINYINT UNSIGNED NOT NULL" DBInsertFormatOperation="%u" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="WORD" CType="WORD" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(WORD))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((UINT)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetUint();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsUint())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetUint();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` SMALLINT UNSIGNED NOT NULL" DBInsertFormatOperation="%u" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="UINT" CType="UINT" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(UINT))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack(&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetUint();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsUint())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetUint();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` INT UNSIGNED NOT NULL" DBInsertFormatOperation="%u" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="INT64" CType="INT64" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(INT64))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (int64_t)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((int64_t)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsInt64())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetInt64();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsInt64())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; =ArrayElementNode.GetInt64();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` BIGINT NOT NULL" DBInsertFormatOperation="%lld" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="UINT64" CType="UINT64" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(UINT64))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (uint64_t)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((uint64_t)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint64())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetUint64();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsUint64())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetUint64();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` BIGINT UNSIGNED NOT NULL" DBInsertFormatOperation="%llu" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="CSmartStruct" CType="CSmartStruct" Flag="196" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;IfNotInInterface&gt;&lt;Variable&gt;.CloneFrom(Value);&lt;/IfNotInInterface&gt;&lt;IfInInterface&gt;&lt;Variable&gt;=Value;&lt;/IfInInterface&gt;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetStructMemberSize(&lt;Variable&gt;.GetLength())" ToXMLOperation="#Error NotSupport" FromXMLOperation="#Error NotSupport" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; &lt;Type&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; &lt;Type&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.CloneFrom(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="`&lt;FieldName&gt;` MEDIUMBLOB NOT NULL" DBInsertFormatOperation="?" DBPutOperation="ParamInfo.Type = DB_TYPE_BINARY;&#13;&#10;ParamInfo.ParamType = DB_PARAM_TYPE_INPUT;&#13;&#10;ParamInfo.IsNull = false;&#13;&#10;ParamInfo.Size = &lt;Variable&gt;.GetDataLen();&#13;&#10;ParamInfo.DigitSize = 0;&#13;&#10;ParameterSet.AddParam(ParamInfo, &lt;Variable&gt;.GetData(), &lt;Variable&gt;.GetDataLen());" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="{&#13;&#10;&tab;CLuaSmartStruct* pLuaData = CLuaSmartStruct::New(pLuaThread, NULL);&#13;&#10;&tab;pLuaData-&gt;CloneFrom(&lt;Variable&gt;);&#13;&#10;&tab;pLuaThread-&gt;PushValue(pLuaData);&#13;&#10;}" FromLuaOperation="{&#13;&#10;&tab;CLuaSmartStruct* pData = pLuaThread-&gt;GetValue&lt;CLuaSmartStruct*&gt;(-1);&#13;&#10;&tab;if(pData)&#13;&#10;&tab;&tab;&lt;Variable&gt;.CloneFrom(pData-&gt;GetValue());&#13;&#10;}" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="OBJECT_ID" CType="OBJECT_ID" Flag="0" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;.ID),FailCount);" UnpackOperation="&lt;Variable&gt;.ID=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(OBJECT_ID))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;.ID);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt;.ID = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (uint64_t)&lt;Variable&gt;.ID, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((uint64_t)&lt;Variable&gt;.ID, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint64())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;.ID = &lt;VariableName&gt;Node.GetUint64();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsUint64())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.ID = ArrayElementNode.GetUint64();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.ID=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;.ID, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` BIGINT UNSIGNED NOT NULL" DBInsertFormatOperation="%llu" DBPutOperation="&lt;Variable&gt;.ID" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;.ID);" FromLuaOperation="&lt;Variable&gt;.ID = pLuaThread-&gt;GetValue&lt;UINT64&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="float" CType="float" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(float))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (double)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((double)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsDouble())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = (float)&lt;VariableName&gt;Node.GetDouble();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsDouble())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = (float)ArrayElementNode.GetDouble();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` FLOAT NOT NULL" DBInsertFormatOperation="%f" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="String" CType="CEasyString" Flag="228" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="Value.GetString(&lt;Variable&gt;);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetStringMemberSize(&lt;Variable&gt;)" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;)).getvalue();" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), rapidjson::Value((LPCTSTR)&lt;Variable&gt;,  (rapidjson::SizeType)&lt;Variable&gt;.GetLength()), Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack( rapidjson::Value((LPCTSTR)&lt;Variable&gt;,  (rapidjson::SizeType)&lt;Variable&gt;.GetLength()), Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsString())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetString();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsString())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetString();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; &lt;Type&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; &lt;Type&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr((LPCTSTR)&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` VARCHAR(&lt;DBLength&gt;) NOT NULL" DBInsertFormatOperation="?" DBPutOperation="StrLen = (UINT) &lt;Variable&gt;.GetStringBytes(NULL, 0, CodePage);&#13;&#10;if (StrBuff.GetBufferSize() &lt; StrLen)&#13;&#10;&tab;StrBuff.Create(StrLen);&#13;&#10;StrLen = (UINT)&lt;Variable&gt;.GetStringBytes((BYTE *)StrBuff.GetBuffer(), StrBuff.GetBufferSize(), CodePage);&#13;&#10;ParamInfo.Type = DB_TYPE_STRING;&#13;&#10;ParamInfo.ParamType = DB_PARAM_TYPE_INPUT;&#13;&#10;ParamInfo.IsNull = false;&#13;&#10;ParamInfo.Size = StrLen;&#13;&#10;ParamInfo.DigitSize = 0;&#13;&#10;ParameterSet.AddParam(ParamInfo, StrBuff.GetBuffer(), StrLen);" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)&lt;Variable&gt;" ToLuaOperation="pLuaThread-&gt;PushValue((LPCTSTR)&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;LPCTSTR&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="ByteArray" CType="CEasyBuffer" Flag="228" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;.Create(Value.GetLength());&#13;&#10;&lt;Variable&gt;.PushBack(Value.GetValueData(),Value.GetLength());" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetBinaryMemberSize(&lt;Variable&gt;.GetUsedSize())" ToXMLOperation="#Error NotSupport" FromXMLOperation="#Error NotSupport" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.SetTag(_T(&quot;StructData&quot;));&#13;&#10;&lt;Variable&gt;.Destory();" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; &lt;Type&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; &lt;Type&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="`&lt;FieldName&gt;` MEDIUMBLOB NOT NULL" DBInsertFormatOperation="?" DBPutOperation="ParamInfo.Type = DB_TYPE_BINARY;&#13;&#10;ParamInfo.ParamType = DB_PARAM_TYPE_INPUT;&#13;&#10;ParamInfo.IsNull = false;&#13;&#10;ParamInfo.Size = &lt;Variable&gt;.GetUsedSize();&#13;&#10;ParamInfo.DigitSize = 0;&#13;&#10;ParameterSet.AddParam(ParamInfo, &lt;Variable&gt;.GetBuffer(), &lt;Variable&gt;.GetUsedSize());" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="{&#13;&#10;&tab;CLuaByteArray* pLuaData = CLuaByteArray::New(pLuaThread, NULL);&#13;&#10;&tab;pLuaData-&gt;CloneFrom(&lt;Variable&gt;.GetBuffer(), &lt;Variable&gt;.GetUsedSize());&#13;&#10;&tab;pLuaThread-&gt;PushValue(pLuaData);&#13;&#10;}" FromLuaOperation="{&#13;&#10;&tab;CLuaByteArray* pData = pLuaThread-&gt;GetValue&lt;CLuaByteArray*&gt;(-1);&#13;&#10;&tab;if(pData)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;.Create(pData-&gt;GetDataLen());&#13;&#10;&tab;&tab;&lt;Variable&gt;.PushBack(pData-&gt;GetData(), pData-&gt;GetDataLen());&#13;&#10;&tab;}&#13;&#10;}" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="TimeStamp" CType="UINT" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(UINT))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack(&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetUint();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsUint())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetUint();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` TIMESTAMP NOT NULL" DBInsertFormatOperation="from_unixtime(%u)" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="CSmartArray" CType="CSmartArray" Flag="196" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;IfNotInInterface&gt;&lt;Variable&gt;.CloneFrom(Value);&lt;/IfNotInInterface&gt;&lt;IfInInterface&gt;&lt;Variable&gt;=Value;&lt;/IfInInterface&gt;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetArrayMemberSize(&lt;Variable&gt;.GetLength())" ToXMLOperation="#Error NotSupport" FromXMLOperation="#Error NotSupport" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; &lt;Type&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; &lt;Type&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.CloneFrom(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="`&lt;FieldName&gt;` MEDIUMBLOB NOT NULL" DBInsertFormatOperation="?" DBPutOperation="ParamInfo.Type = DB_TYPE_BINARY;&#13;&#10;ParamInfo.ParamType = DB_PARAM_TYPE_INPUT;&#13;&#10;ParamInfo.IsNull = false;&#13;&#10;ParamInfo.Size = &lt;Variable&gt;.GetDataLen();&#13;&#10;ParamInfo.DigitSize = 0;&#13;&#10;ParameterSet.AddParam(ParamInfo, &lt;Variable&gt;.GetData(), &lt;Variable&gt;.GetDataLen());" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="{&#13;&#10;&tab;CLuaSmartArray* pLuaData = CLuaSmartArray::New(pLuaThread, NULL);&#13;&#10;&tab;pLuaData-&gt;CloneFrom(&lt;Variable&gt;);&#13;&#10;&tab;pLuaThread-&gt;PushValue(pLuaData);&#13;&#10;}" FromLuaOperation="{&#13;&#10;&tab;CLuaSmartArray* pData = pLuaThread-&gt;GetValue&lt;CLuaSmartArray*&gt;(-1);&#13;&#10;&tab;if(pData)&#13;&#10;&tab;&tab;&lt;Variable&gt;.CloneFrom(pData-&gt;GetValue());&#13;&#10;}" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="double" CType="double" Flag="64" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=Value;&#13;&#10;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(double))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), &lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;));" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (double)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((double)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsDouble())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = &lt;VariableName&gt;Node.GetDouble();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if (ArrayElementNode.IsDouble())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = ArrayElementNode.GetDouble();&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="`&lt;FieldName&gt;` DOUBLE NOT NULL" DBInsertFormatOperation="%f" DBPutOperation="&lt;Variable&gt;" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="_T(&quot;&lt;VariableName&gt;&quot;), (LPCTSTR)ToString(&lt;Variable&gt;)" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;&lt;Type&gt;&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<Type Name="Variant" CType="CVariedValue" Flag="196" PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;),FailCount);" UnpackOperation="Value.GetVariedValue(&lt;Variable&gt;);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetVariedMemberSize(&lt;Variable&gt;)" ToXMLOperation="#Error NotSupport" FromXMLOperation="#Error NotSupport" ToJsonOperation="&lt;IfNotArray&gt;VariedValueToJson(&lt;Variable&gt;, _T(&quot;&lt;VariableName&gt;&quot;), StructNode, Alloc);&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;VariedValueToJsonArray(&lt;Variable&gt;, &lt;VariableName&gt;Array, Alloc);&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;VariedValueFromJson(&lt;Variable&gt;, &lt;VariableName&gt;Node);&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;VariedValueFromJson(&lt;Variable&gt;, ArrayElementNode);&lt;/IfArray&gt;" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; &lt;Type&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; &lt;Type&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="CPropertyGridTools::ToStr(&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;typeid(T).name()&lt;/HaveExtendType&gt;, BindData[StartIndex + FillCount], MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildValue(&lt;VarShowName&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;&quot;&lt;Type&gt;&quot;&lt;/HaveExtendType&gt;, &lt;Variable&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;" LogSendOperation="" ToLuaOperation="pLuaThread-&gt;PushValue(&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = pLuaThread-&gt;GetValue&lt;CVariedValue&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
</TypeDef>
