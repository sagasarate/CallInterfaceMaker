[
    {
        "Name": "bool",
        "CType": "bool",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(BYTE))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsBool())\r\n{\r\n\t<Variable> = ArrayElementNode.GetBool();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsBool())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetBool();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=false;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` TINYINT UNSIGNED NOT NULL",
            "DBInsertFormatOperation": "%u",
            "DBPutOperation": "<Variable> ? 1:0",
            "DBGetOperation": "",
            "FileLogFillOperation": "(<Variable> ? _T(\"true\") : T(\"false\"))",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%s"
        }
    },
    {
        "Name": "char",
        "CType": "char",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(char))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsInt())\r\n{\r\n\t<Variable> = ArrayElementNode.GetInt();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsInt())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetInt();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` TINYINT NOT NULL",
            "DBInsertFormatOperation": "%d",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%d"
        }
    },
    {
        "Name": "short",
        "CType": "short",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(short))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsInt())\r\n{\r\n\t<Variable> = ArrayElementNode.GetInt();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsInt())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetInt();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` SMALLINT NOT NULL",
            "DBInsertFormatOperation": "%d",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%d"
        }
    },
    {
        "Name": "int",
        "CType": "int",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(int))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsInt())\r\n{\r\n\t<Variable> = ArrayElementNode.GetInt();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsInt())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetInt();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` INT NOT NULL",
            "DBInsertFormatOperation": "%d",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%d"
        }
    },
    {
        "Name": "BYTE",
        "CType": "BYTE",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(BYTE))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsUint())\r\n{\r\n\t<Variable> = ArrayElementNode.GetUint();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsUint())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetUint();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` TINYINT UNSIGNED NOT NULL",
            "DBInsertFormatOperation": "%u",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%u"
        }
    },
    {
        "Name": "WORD",
        "CType": "WORD",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(WORD))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsUint())\r\n{\r\n\t<Variable> = ArrayElementNode.GetUint();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsUint())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetUint();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` SMALLINT UNSIGNED NOT NULL",
            "DBInsertFormatOperation": "%u",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%u"
        }
    },
    {
        "Name": "UINT",
        "CType": "UINT",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(UINT))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsUint())\r\n{\r\n\t<Variable> = ArrayElementNode.GetUint();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsUint())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetUint();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` INT UNSIGNED NOT NULL",
            "DBInsertFormatOperation": "%u",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%u"
        }
    },
    {
        "Name": "INT64",
        "CType": "INT64",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(INT64))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack( (int64_t)<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), (int64_t) <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsInt64())\r\n{\r\n\t<Variable> =ArrayElementNode.GetInt64();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsInt64())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetInt64();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` BIGINT NOT NULL",
            "DBInsertFormatOperation": "%lld",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%lld"
        }
    },
    {
        "Name": "UINT64",
        "CType": "UINT64",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(UINT64))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack( (uint64_t)<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), (uint64_t) <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsUint64())\r\n{\r\n\t<Variable> = ArrayElementNode.GetUint64();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsUint64())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetUint64();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` BIGINT UNSIGNED NOT NULL",
            "DBInsertFormatOperation": "%llu",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%llu"
        }
    },
    {
        "Name": "CSmartStruct",
        "CType": "CSmartStruct",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<IfNotInInterface><Variable>.CloneFrom(Value);</IfNotInInterface><IfInInterface><Variable>=Value;</IfInInterface>",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetStructMemberSize(<Variable>.GetLength())",
            "ToXMLOperation": "#Error NotSupport",
            "FromXMLOperation": "#Error NotSupport",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "const <Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.Clear();",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>.CloneFrom(<RightValue><Variable>);\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<const> <Type>& Get<VariableName>() <const>;",
            "GetMethodDefine": "inline <const> <Type>& <ClassName>::Get<VariableName>() <const>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(const <Type>& Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(const <Type>& Value)\r\n{\r\n\t<Variable>.CloneFrom(Value);\r\n\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "`<FieldName>` MEDIUMBLOB NOT NULL",
            "DBInsertFormatOperation": "?",
            "DBPutOperation": "ParamInfo.Type = DB_TYPE_BINARY;\r\nParamInfo.ParamType = DB_PARAM_TYPE_INPUT;\r\nParamInfo.IsNull = false;\r\nParamInfo.Size = <Variable>.GetDataLen();\r\nParamInfo.DigitSize = 0;\r\nParameterSet.AddParam(ParamInfo, <Variable>.GetData(), <Variable>.GetDataLen());",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "{\r\n\tCLuaSmartStruct* pLuaData = CLuaSmartStruct::New(pLuaThread, NULL);\r\n\tpLuaData->CloneFrom(<Variable>);\r\n\tpLuaThread->PushValue(pLuaData);\r\n}",
            "FromLuaOperation": "{\r\n\tCLuaSmartStruct* pData = pLuaThread->GetValue<CLuaSmartStruct*>(-1);\r\n\tif(pData)\r\n\t\t<Variable>.CloneFrom(pData->GetValue());\r\n}",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "OBJECT_ID",
        "CType": "OBJECT_ID",
        "Flag": 0,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>.ID),FailCount);",
            "UnpackOperation": "<Variable>.ID=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(OBJECT_ID))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>.ID);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable>.ID = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack( (uint64_t)<Variable>.ID, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), (uint64_t) <Variable>.ID, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsUint64())\r\n{\r\n\t<Variable>.ID = ArrayElementNode.GetUint64();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsUint64())\r\n\t{\r\n\t\t<Variable>.ID = <VariableName>Node.GetUint64();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "const <Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.ID=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>.ID, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` BIGINT UNSIGNED NOT NULL",
            "DBInsertFormatOperation": "%llu",
            "DBPutOperation": "<Variable>.ID",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>.ID",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>.ID)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>.ID);",
            "FromLuaOperation": "<Variable>.ID = pLuaThread->GetValue<UINT64>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "0x%llX"
        }
    },
    {
        "Name": "float",
        "CType": "float",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(float))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack( (double)<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), (double) <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsNumber())\r\n{\r\n\t<Variable> = (float)ArrayElementNode.GetDouble();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsNumber())\r\n\t{\r\n\t\t<Variable> = (float)<VariableName>Node.GetDouble();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` FLOAT NOT NULL",
            "DBInsertFormatOperation": "%f",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%f"
        }
    },
    {
        "Name": "String",
        "CType": "CEasyString",
        "Flag": 228,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "Value.GetString(<Variable>);",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetStringMemberSize(<Variable>)",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\")).getvalue();",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack( rapidjson::Value((LPCTSTR)<Variable>,  (rapidjson::SizeType)<Variable>.GetLength()), Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), rapidjson::Value((LPCTSTR)<Variable>,  (rapidjson::SizeType)<Variable>.GetLength()), Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsString())\r\n{\r\n\t<Variable> = ArrayElementNode.GetString();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsString())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetString();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "const <Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.Clear();",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<const> <Type>& Get<VariableName>() <const>;",
            "GetMethodDefine": "inline <const> <Type>& <ClassName>::Get<VariableName>() <const>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(const <Type>& Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(const <Type>& Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr((LPCTSTR)<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` VARCHAR(<DBLength>) NOT NULL",
            "DBInsertFormatOperation": "?",
            "DBPutOperation": "StrLen = (UINT) <Variable>.GetStringBytes(NULL, 0, CodePage);\r\nif (StrBuff.GetBufferSize() < StrLen)\r\n\tStrBuff.Create(StrLen);\r\nStrLen = (UINT)<Variable>.GetStringBytes((BYTE *)StrBuff.GetBuffer(), StrBuff.GetBufferSize(), CodePage);\r\nParamInfo.Type = DB_TYPE_STRING;\r\nParamInfo.ParamType = DB_PARAM_TYPE_INPUT;\r\nParamInfo.IsNull = false;\r\nParamInfo.Size = StrLen;\r\nParamInfo.DigitSize = 0;\r\nParameterSet.AddParam(ParamInfo, StrBuff.GetBuffer(), StrLen);",
            "DBGetOperation": "",
            "FileLogFillOperation": "(LPCTSTR)<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)<Variable>",
            "ToLuaOperation": "pLuaThread->PushValue((LPCTSTR)<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<LPCTSTR>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%s"
        }
    },
    {
        "Name": "ByteArray",
        "CType": "CEasyBuffer",
        "Flag": 228,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>.Create(Value.GetLength());\r\n<Variable>.PushBack(Value.GetValueData(),Value.GetLength());",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetBinaryMemberSize(<Variable>.GetUsedSize())",
            "ToXMLOperation": "#Error NotSupport",
            "FromXMLOperation": "#Error NotSupport",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "const <Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.SetTag(_T(\"StructData\"));\r\n<Variable>.Destory();",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<const> <Type>& Get<VariableName>() <const>;",
            "GetMethodDefine": "inline <const> <Type>& <ClassName>::Get<VariableName>() <const>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(const <Type>& Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(const <Type>& Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "`<FieldName>` MEDIUMBLOB NOT NULL",
            "DBInsertFormatOperation": "?",
            "DBPutOperation": "ParamInfo.Type = DB_TYPE_BINARY;\r\nParamInfo.ParamType = DB_PARAM_TYPE_INPUT;\r\nParamInfo.IsNull = false;\r\nParamInfo.Size = <Variable>.GetUsedSize();\r\nParamInfo.DigitSize = 0;\r\nParameterSet.AddParam(ParamInfo, <Variable>.GetBuffer(), <Variable>.GetUsedSize());",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "{\r\n\tCLuaByteArray* pLuaData = CLuaByteArray::New(pLuaThread, NULL);\r\n\tpLuaData->CloneFrom(<Variable>.GetBuffer(), <Variable>.GetUsedSize());\r\n\tpLuaThread->PushValue(pLuaData);\r\n}",
            "FromLuaOperation": "{\r\n\tCLuaByteArray* pData = pLuaThread->GetValue<CLuaByteArray*>(-1);\r\n\tif(pData)\r\n\t{\r\n\t\t<Variable>.Create(pData->GetDataLen());\r\n\t\t<Variable>.PushBack(pData->GetData(), pData->GetDataLen());\r\n\t}\r\n}",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "TimeStamp",
        "CType": "UINT",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(UINT))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack(<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsUint())\r\n{\r\n\t<Variable> = ArrayElementNode.GetUint();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsUint())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetUint();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` TIMESTAMP NOT NULL",
            "DBInsertFormatOperation": "from_unixtime(%u)",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%u"
        }
    },
    {
        "Name": "CSmartArray",
        "CType": "CSmartArray",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<IfNotInInterface><Variable>.CloneFrom(Value);</IfNotInInterface><IfInInterface><Variable>=Value;</IfInInterface>",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetArrayMemberSize(<Variable>.GetLength())",
            "ToXMLOperation": "#Error NotSupport",
            "FromXMLOperation": "#Error NotSupport",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "const <Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.Clear();",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>.CloneFrom(<RightValue><Variable>);\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<const> <Type>& Get<VariableName>() <const>;",
            "GetMethodDefine": "inline <const> <Type>& <ClassName>::Get<VariableName>() <const>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(const <Type>& Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(const <Type>& Value)\r\n{\r\n\t<Variable>.CloneFrom(Value);\r\n\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "`<FieldName>` MEDIUMBLOB NOT NULL",
            "DBInsertFormatOperation": "?",
            "DBPutOperation": "ParamInfo.Type = DB_TYPE_BINARY;\r\nParamInfo.ParamType = DB_PARAM_TYPE_INPUT;\r\nParamInfo.IsNull = false;\r\nParamInfo.Size = <Variable>.GetDataLen();\r\nParamInfo.DigitSize = 0;\r\nParameterSet.AddParam(ParamInfo, <Variable>.GetData(), <Variable>.GetDataLen());",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "{\r\n\tCLuaSmartArray* pLuaData = CLuaSmartArray::New(pLuaThread, NULL);\r\n\tpLuaData->CloneFrom(<Variable>);\r\n\tpLuaThread->PushValue(pLuaData);\r\n}",
            "FromLuaOperation": "{\r\n\tCLuaSmartArray* pData = pLuaThread->GetValue<CLuaSmartArray*>(-1);\r\n\tif(pData)\r\n\t\t<Variable>.CloneFrom(pData->GetValue());\r\n}",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "double",
        "CType": "double",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "<Variable>=Value;\r\n<IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF>",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetFixMemberSize(sizeof(double))",
            "ToXMLOperation": "StructNode.append_attribute(_T(\"<VariableName>\"), <Variable>);",
            "FromXMLOperation": "if (StructNode.has_attribute(_T(\"<VariableName>\")))\r\n\t<Variable> = StructNode.attribute(_T(\"<VariableName>\"));",
            "ToJsonOperation": "<IsArray>\r\n<VariableName>Array.PushBack( (double)<Variable>, Alloc);\r\n<!IsArray>\r\nStructNode.AddMember(_T(\"<VariableName>\"), (double) <Variable>, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif (ArrayElementNode.IsNumber())\r\n{\r\n\t<Variable> = ArrayElementNode.GetDouble();\r\n}\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tif (<VariableName>Node.IsNumber())\r\n\t{\r\n\t\t<Variable> = <VariableName>Node.GetDouble();\r\n\t}\r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<Type> Get<VariableName>() const;",
            "GetMethodDefine": "inline <Type> <ClassName>::Get<VariableName>() const\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(<Type> Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(<Type> Value)\r\n{\r\n\tif(<Variable>!=Value)\r\n\t{\r\n\t\t<Variable>=Value;\r\n\t\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n\t}\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "`<FieldName>` DOUBLE NOT NULL",
            "DBInsertFormatOperation": "%f",
            "DBPutOperation": "<Variable>",
            "DBGetOperation": "",
            "FileLogFillOperation": "<Variable>",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)ToString(<Variable>)",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<<Type>>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%f"
        }
    },
    {
        "Name": "Variant",
        "CType": "CVariedValue",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "CHECK_SMART_STRUCT_ADD(Packet.AddMember(<IfNotInArray><SST_ID>,</IfNotInArray><Variable>),FailCount);",
            "UnpackOperation": "Value.GetVariedValue(<Variable>);",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>::GetVariedMemberSize(<Variable>)",
            "ToXMLOperation": "#Error NotSupport",
            "FromXMLOperation": "#Error NotSupport",
            "ToJsonOperation": "<IsArray>\r\nVariedValueToJsonArray(<Variable>, <VariableName>Array, Alloc);\r\n<!IsArray>\r\nVariedValueToJson(<Variable>, _T(\"<VariableName>\"), StructNode, Alloc);\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nVariedValueFromJson(<Variable>, ArrayElementNode);\r\n<!IsArray>\r\nif (StructNode.HasMember(_T(\"<VariableName>\")))\r\n{\r\n\trapidjson::Value& <VariableName>Node = StructNode[_T(\"<VariableName>\")];\r\n\tVariedValueFromJson(<Variable>, <VariableName>Node);\r\n}\r\n</IsArray>",
            "ReferenceDefine": "const <Type>&",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.Clear();",
            "CloneOperation": "<IfInDataObject>if(Flag&<ModifyFlag>)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "<const> <Type>& Get<VariableName>() <const>;",
            "GetMethodDefine": "inline <const> <Type>& <ClassName>::Get<VariableName>() <const>\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "void Set<VariableName>(const <Type>& Value);",
            "SetMethodDefine": "inline void <ClassName>::Set<VariableName>(const <Type>& Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "CPropertyGridTools::ToStr(<Variable>, <HaveExtendType>\"<ExtendType>\"<!HaveExtendType>NULL</HaveExtendType>, CharBuffer, 64)",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "(LPCTSTR)<Variable>.ToString()",
            "AliLogSendOperation": "_T(\"<VariableName>\"), (LPCTSTR)<Variable>.ToString()",
            "ToLuaOperation": "pLuaThread->PushValue(<Variable>);",
            "FromLuaOperation": "<Variable> = pLuaThread->GetValue<CVariedValue>(-1);",
            "CreateXLSColumnOperation": "",
            "CheckXLSColumnOperation": "",
            "ToXLSOperation": "",
            "FromXLSOperation": "",
            "FormatSpecOperation": "%s"
        }
    }
]