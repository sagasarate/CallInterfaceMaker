<?xml version="1.0" encoding="utf-8"?>
<Config>
	<OneFileExport IsExport="false" FileExt="h"/>
	<InterfaceHeaderExport IsExport="true" FileExt="h"/>
	<StructExport IsExport="true" FileExt="h"/>
	<EnumExport IsExport="true" FileExt="h"/>
	<ConstExport IsExport="true" FileExt="h"/>
	<DataStructHeaderExport IsExport="true" FileExt="h"/>
	<InterfaceExport IsExport="true" FileExt="h"/>
	<CallHeaderExport IsExport="true" FileExt="h"/>
	<CallSourceExport IsExport="true" FileExt="cpp"/>
	<HandlerHeaderExport IsExport="true" FileExt="h"/>
	<HandlerSourceExport IsExport="true" FileExt="cpp"/>
	<DataObjectHeaderExport IsExport="true" FileExt="h"/>
	<DataObjectSourceExport IsExport="true" FileExt="cpp"/>
	<DataObjectModifyFlagsHeaderExport IsExport="true" FileExt="h"/>
	<DataObjectModifyFlagsSourceExport IsExport="true" FileExt="cpp"/>
	<DefaultStructGenerateOperations PackOperation="CSmartStruct SubPacket=Packet.PrepareSubStruct();&#13;&#10;&lt;IfNotDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket))&#13;&#10;&tab;FailCount++;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;))&#13;&#10;&tab;FailCount++;&lt;/IfDataObject&gt;&#13;&#10;if(!Packet.FinishMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;SubPacket.GetDataLen()))&#13;&#10;&tab;FailCount++;" UnpackOperation="&lt;IfNotDataObject&gt;&lt;Variable&gt;.ParsePacket(Value);&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&lt;Variable&gt;.ParsePacket(Value,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;" SizeCaculateOperation="&lt;IfNotDataObject&gt;&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetStructMemberSize(&lt;Variable&gt;.GetSmartStructSize())&lt;/IfNotDataObject&gt;&lt;IfDataObject&gt;&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetStructMemberSize(&lt;Variable&gt;.GetSmartStructSize(&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;))&lt;/IfDataObject&gt;" ToXMLOperation="&lt;IfNotDataObject&gt;&#13;&#10;xml_node &lt;VariableName&gt;Node=StructNode.append_child(node_element,_T(&quot;&lt;VariableName&gt;&quot;));&#13;&#10;&lt;Variable&gt;.ToXML(&lt;VariableName&gt;Node);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;xml_node &lt;VariableName&gt;Node=StructNode.append_child(node_element,_T(&quot;&lt;VariableName&gt;&quot;));&#13;&#10;&lt;Variable&gt;.ToXML(&lt;VariableName&gt;Node);&#13;&#10;&lt;/IfDataObject&gt;" FromXMLOperation="&lt;IfNotDataObject&gt;&#13;&#10;xml_node &lt;VariableName&gt;Node=StructNode;&#13;&#10;if(&lt;VariableName&gt;Node.moveto_child(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.FromXML(&lt;VariableName&gt;Node);&#13;&#10;}&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;xml_node &lt;VariableName&gt;Node=StructNode;&#13;&#10;if(&lt;VariableName&gt;Node.moveto_child(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.FromXML(&lt;VariableName&gt;Node);&#13;&#10;}&#13;&#10;&lt;IfUpdateMF&gt;UpdateFlag|=(UINT64)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&lt;/IfDataObject&gt;" ToJsonOperation="&lt;IfNotDataObject&gt;&#13;&#10;rapidjson::Value &lt;VariableName&gt;Node(rapidjson::kObjectType);&#13;&#10;&lt;Variable&gt;.ToJson(&lt;VariableName&gt;Node, Alloc);&#13;&#10;&lt;IsArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack(&lt;VariableName&gt;Node, Alloc);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;VariableName&gt;Node, Alloc);&#13;&#10;&lt;/IsArray&gt;&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;rapidjson::Value &lt;VariableName&gt;Node(rapidjson::kObjectType);&#13;&#10;&lt;Variable&gt;.ToJson(&lt;VariableName&gt;Node, Alloc,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;IsArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack(&lt;VariableName&gt;Node, Alloc);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;VariableName&gt;Node, Alloc);&#13;&#10;&lt;/IsArray&gt;&#13;&#10;&lt;/IfDataObject&gt;" FromJsonOperation="&lt;IsArray&gt;&#13;&#10;if (ArrayElementNode.IsObject())&#13;&#10;{&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;&tab;&lt;Variable&gt;.FromJson(ArrayElementNode,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;&tab;&lt;Variable&gt;.FromJson(ArrayElementNode);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;}&#13;&#10;&lt;!IsArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsObject())&#13;&#10;&tab;{&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;&tab;&tab;&lt;Variable&gt;.FromJson(&lt;VariableName&gt;Node,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;&tab;&tab;&lt;Variable&gt;.FromJson(&lt;VariableName&gt;Node);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IsArray&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;&lt;IfUpdateMF&gt;UpdateFlag |= (UINT64) &lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&lt;/IfDataObject&gt;" ReferenceDefine="const &lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;IfNotDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&lt;IfDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; &lt;Type&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; &lt;Type&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const &lt;Type&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="`&lt;FieldName&gt;` MEDIUMBLOB NOT NULL" DBInsertFormatOperation="?" DBPutOperation="{&#13;&#10;&tab;&lt;IfNotDataObject&gt;StrLen = CSmartStruct::GetStructMemberSize(&lt;Variable&gt;.GetSmartStructSize()) + 32;&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&lt;IfDataObject&gt;StrLen = CSmartStruct::GetStructMemberSize(&lt;Variable&gt;.GetSmartStructSize(&lt;FULL_MODIFY_FLAG&gt;)) + 32;&lt;/IfDataObject&gt;&#13;&#10;&tab;if (StrBuff.GetBufferSize() &lt; StrLen)&#13;&#10;&tab;&tab;StrBuff.Create(StrLen);&#13;&#10;&#13;&#10;&tab;CSmartStruct Packet(StrBuff.GetBuffer(), StrBuff.GetBufferSize(), true);&#13;&#10;&tab;&lt;IfNotDataObject&gt;&lt;Variable&gt;.MakePacket(Packet);&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&lt;IfDataObject&gt;&lt;Variable&gt;.MakePacket(Packet, &lt;FULL_MODIFY_FLAG&gt;);&lt;/IfDataObject&gt;&#13;&#10;&#13;&#10;&tab;ParamInfo.Type = DB_TYPE_BINARY;&#13;&#10;&tab;ParamInfo.ParamType = DB_PARAM_TYPE_INPUT;&#13;&#10;&tab;ParamInfo.IsNull = false;&#13;&#10;&tab;ParamInfo.Size = &lt;Variable&gt;.GetDataLen();&#13;&#10;&tab;ParamInfo.DigitSize = 0;&#13;&#10;&tab;ParameterSet.AddParam(ParamInfo, &lt;Variable&gt;.GetData(), &lt;Variable&gt;.GetDataLen());&#13;&#10;}" DBGetOperation="" PropertyGridFillOperation="&#13;&#10;&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildGroupWithArray(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;,  &lt;IfInArray&gt;PGGF_ADD_BUTTON | PGGF_DEL_BUTTON | PGGF_UP_BUTTON | PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;, &#13;&#10;&tab;&lt;Type&gt;::FillPropertyGridByBindData, BindData, StartIndex + FillCount, MemberID, StartIndex + FillCount);&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildGroupWithStruct(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;,  &lt;IfInArray&gt;PGGF_ADD_BUTTON | PGGF_DEL_BUTTON | PGGF_UP_BUTTON | PGGF_DOWN_BUTTON&lt;/IfInArray&gt;&lt;IfNotInArray&gt;0&lt;/IfNotInArray&gt;, &#13;&#10;&tab;[](IPropertyGridItem* pPGItem, &lt;Type&gt;&amp; Info)-&gt;int{return Info.FillPropertyGrid(pPGItem);}, &lt;Variable&gt;, 0, &lt;SST_ID&gt;, &lt;Index&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;" LogSendOperation="" ToLuaOperation="&lt;Variable&gt;.ToLuaTable(pLuaThread);" FromLuaOperation="&lt;Variable&gt;.FromLuaTable(pLuaThread, -1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<DefaultEnumGenerateOperations PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;(UINT)&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=(&lt;Type&gt;)((UINT)Value);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(UINT))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), (UINT)&lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = (&lt;Type&gt;)((UINT)StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;)));" ToJsonOperation="&lt;IsArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((UINT)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (UINT)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IsArray&gt;" FromJsonOperation="&lt;IsArray&gt;&#13;&#10;if (ArrayElementNode.IsUint())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; =  (&lt;Type&gt;)ArrayElementNode.GetUint();&#13;&#10;}&#13;&#10;&lt;!IsArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = (&lt;Type&gt;)&lt;VariableName&gt;Node.GetUint();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IsArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;;" InitOperation="&lt;Variable&gt;=(&lt;Type&gt;)0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="&lt;HaveStrTrans&gt;&lt;Type&gt;_To_Str((UINT)&lt;Variable&gt;)&lt;!HaveStrTrans&gt;CPropertyGridTools::ToStr((UINT)&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)&lt;/HaveStrTrans&gt;" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount], &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;, &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;!IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;&lt;BeBind&gt;pBindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;pPGItem-&gt;AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount], &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, Str_To_&lt;Type&gt;, MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;&lt;BeBind&gt;pBindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;pPGItem-&gt;AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;, &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, Str_To_&lt;Type&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;/IsFlagEnum&gt;" LogSendOperation="" ToLuaOperation="pLuaThread-&gt;PushValue((UINT)&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = (&lt;Type&gt;)pLuaThread-&gt;GetValue&lt;UINT&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<DefaultEnum64GenerateOperations PackOperation="CHECK_SMART_STRUCT_ADD(Packet.AddMember(&lt;IfNotInArray&gt;&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;(UINT64)&lt;Variable&gt;),FailCount);" UnpackOperation="&lt;Variable&gt;=(&lt;Type&gt;)((UINT64)Value);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;::GetFixMemberSize(sizeof(UINT64))" ToXMLOperation="StructNode.append_attribute(_T(&quot;&lt;VariableName&gt;&quot;), (UINT64)&lt;Variable&gt;);" FromXMLOperation="if (StructNode.has_attribute(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;&lt;Variable&gt; = (&lt;Type&gt;)((UINT64)StructNode.attribute(_T(&quot;&lt;VariableName&gt;&quot;)));" ToJsonOperation="&lt;IsArray&gt;&#13;&#10;&lt;VariableName&gt;Array.PushBack((UINT64)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), (UINT64)&lt;Variable&gt;, Alloc);&#13;&#10;&lt;/IsArray&gt;" FromJsonOperation="&lt;IsArray&gt;&#13;&#10;if (ArrayElementNode.IsUint64())&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt; = (UINT64)ArrayElementNode.GetUint64();&#13;&#10;}&#13;&#10;&lt;!IsArray&gt;&#13;&#10;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;{&#13;&#10;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;if (&lt;VariableName&gt;Node.IsUint64())&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = (UINT64)&lt;VariableName&gt;Node.GetUint64();&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;&lt;/IsArray&gt;" ReferenceDefine="&lt;Type&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;;" InitOperation="&lt;Variable&gt;=(&lt;Type&gt;)0;" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;Type&gt; Get&lt;VariableName&gt;() const;" GetMethodDefine="inline &lt;Type&gt; &lt;ClassName&gt;::Get&lt;VariableName&gt;() const&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(&lt;Type&gt; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;if(&lt;Variable&gt;!=Value)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="&lt;HaveStrTrans&gt;&lt;Type&gt;_To_Str((UINT64)&lt;Variable&gt;)&lt;!HaveStrTrans&gt;CPropertyGridTools::ToStr((UINT64)&lt;Variable&gt;, &lt;HaveExtendType&gt;&quot;&lt;ExtendType&gt;&quot;&lt;!HaveExtendType&gt;NULL&lt;/HaveExtendType&gt;, CharBuffer, 64)&lt;/HaveStrTrans&gt;" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="&lt;IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount], &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;pPGItem-&gt;AddChildFlag(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;, &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;!IsFlagEnum&gt;&#13;&#10;&lt;InBindData&gt;&#13;&#10;&lt;BeBind&gt;pBindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;pPGItem-&gt;AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, BindData[StartIndex + FillCount], &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, Str_To_&lt;Type&gt;, MemberID, StartIndex + FillCount, &lt;Description&gt;);&#13;&#10;FillCount++;&#13;&#10;&lt;!InBindData&gt;&#13;&#10;&lt;BeBind&gt;pBindParent = &lt;!BeBind&gt;&lt;/BeBind&gt;pPGItem-&gt;AddChildEnum(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, &lt;Variable&gt;, &lt;EnumMemberCount&gt;, g_&lt;Type&gt;_LIST,&#13;&#10;&tab;&lt;Type&gt;_To_Str, Str_To_&lt;Type&gt;, &lt;SST_ID&gt;, &lt;Index&gt;, &lt;Description&gt;);&#13;&#10;&lt;/InBindData&gt;&#13;&#10;&lt;/IsFlagEnum&gt;" LogSendOperation="" ToLuaOperation="pLuaThread-&gt;PushValue((UINT64)&lt;Variable&gt;);" FromLuaOperation="&lt;Variable&gt; = (&lt;Type&gt;)pLuaThread-&gt;GetValue&lt;UINT64&gt;(-1);" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<ArrayDefineConfig PackOperation="&lt;IfCheckMF&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;CSmartStruct&amp; ParentPacket=Packet;&#13;&#10;&tab;{&#13;&#10;&tab;&tab;CSmartArray Packet=ParentPacket.PrepareSubArray();&#13;&#10;&tab;&tab;&lt;IfIsBaseType&gt;Packet.AddArray(&lt;Variable&gt;);&lt;/IfIsBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfIsNotBaseType&gt;for(size_t i=0;i&lt;&lt;Variable&gt;.GetCount();i++)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;PackOperation&gt;&#13;&#10;&tab;&tab;}&lt;/IfIsNotBaseType&gt;&#13;&#10;&tab;&tab;if(!ParentPacket.FinishMember(&lt;SST_ID&gt;,Packet.GetDataLen()))&#13;&#10;&tab;&tab;&tab;FailCount++;&#13;&#10;&tab;}&#13;&#10;}" UnpackOperation="case &lt;SST_ID&gt;:&#13;&#10;&tab;&lt;IfCheckMF&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfCheckMF&gt;&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;.Clear();&#13;&#10;&tab;&tab;CSmartArray Packet=Value;&#13;&#10;&tab;&tab;&lt;IfIsBaseType&gt;Packet.GetArray(&lt;Variable&gt;);&lt;/IfIsBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfIsNotBaseType&gt;for(CSmartValue Value : Packet)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;ElementType&gt;&amp; ArrayElement=*&lt;Variable&gt;.AddEmpty();&#13;&#10;&tab;&tab;&tab;&lt;UnpackOperation&gt;&#13;&#10;&tab;&tab;}&lt;/IfIsNotBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;UpdateFlag |= &lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;&tab;break;&#13;&#10;" SizeCaculateOperation="&lt;IfCheckMF&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfCheckMF&gt;&#13;&#10;&lt;IfCheckMF&gt;{&lt;/IfCheckMF&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&lt;IfIsFixLenType&gt;_PackSize += &lt;ArrayElementSize&gt;*&lt;Variable&gt;.GetCount();&lt;/IfIsFixLenType&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&lt;IfIsVariableLenType&gt;for(size_t i=0;i&lt;&lt;Variable&gt;.GetCount();i++)&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;{&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&tab;_PackSize += &lt;ArrayElementSize&gt;;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;}&lt;/IfIsVariableLenType&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;_PackSize += CSmartStruct::GetArrayMemberSize(0);&#13;&#10;&lt;IfCheckMF&gt;}&lt;/IfCheckMF&gt;" ToXMLOperation="&lt;IfCheckMF&gt;if((Flag&amp;&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;xml_node &lt;VariableName&gt;NodeSave = StructNode;&#13;&#10;&tab;xml_node &lt;VariableName&gt;Node = StructNode.append_child(node_element,_T(&quot;&lt;VariableName&gt;&quot;));&#13;&#10;&tab;for(size_t i=0;i&lt;&lt;Variable&gt;.GetCount();i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;StructNode =  &lt;VariableName&gt;Node.append_child(node_element,_T(&quot;ArrayElement&quot;));&#13;&#10;&tab;&tab;&lt;ToXMLOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode =  &lt;VariableName&gt;NodeSave;&#13;&#10;}" FromXMLOperation="&lt;IfCheckMF&gt;if((Flag&amp;&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;xml_node &lt;VariableName&gt;NodeSave = StructNode;&#13;&#10;&tab;xml_node &lt;VariableName&gt;Node = StructNode;&#13;&#10;&tab;if(&lt;VariableName&gt;Node.moveto_child(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;.Clear();&#13;&#10;&tab;&tab;for (UINT nc = 0; nc &lt; &lt;VariableName&gt;Node.children(); nc++)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;StructNode = &lt;VariableName&gt;Node.child(nc);&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromXMLOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;&tab;StructNode = &lt;VariableName&gt;NodeSave;&#13;&#10;}" ToJsonOperation="&lt;IfCheckMF&gt;if ((Flag&amp;&lt;ModifyFlag&gt;) != 0) &lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;rapidjson::Value &lt;VariableName&gt;Array(rapidjson::kArrayType);&#13;&#10;&tab;for (size_t i = 0; i &lt; &lt;Variable&gt;.GetCount(); i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;ToJsonOperation&gt;&#13;&#10;&tab;}&#13;&#10;&tab;StructNode.AddMember(_T(&quot;&lt;VariableName&gt;&quot;), &lt;VariableName&gt;Array, Alloc);&#13;&#10;}" FromJsonOperation="&lt;IfCheckMF&gt;if ((Flag&amp;&lt;ModifyFlag&gt;) != 0) &lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;if (StructNode.HasMember(_T(&quot;&lt;VariableName&gt;&quot;)))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;rapidjson::Value&amp; &lt;VariableName&gt;Node = StructNode[_T(&quot;&lt;VariableName&gt;&quot;)];&#13;&#10;&tab;&tab;if (&lt;VariableName&gt;Node.IsArray())&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Clear();&#13;&#10;&tab;&tab;&tab;for (size_t j = 0; j &lt; &lt;VariableName&gt;Node.Size(); j++)&#13;&#10;&tab;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&tab;rapidjson::Value&amp; ArrayElementNode = &lt;VariableName&gt;Node[(rapidjson::SizeType)j];&#13;&#10;&tab;&tab;&tab;&tab;&lt;ElementType&gt;&amp; ArrayElement=*&lt;Variable&gt;.AddEmpty();&#13;&#10;&tab;&tab;&tab;&tab;&lt;FromJsonOperation&gt;&#13;&#10;&tab;&tab;&tab;}&#13;&#10;&tab;&tab;}&tab;&tab;&#13;&#10;&tab;}&tab;&#13;&#10;}" ReferenceDefine="const CEasyArray&lt;&lt;Type&gt;&gt;&amp;" ReferenceUse="&lt;Variable&gt;" VariableDefine="CEasyArray&lt;&lt;Type&gt;&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.SetTag(_T(&quot;StructData&quot;));&#13;&#10;&lt;Variable&gt;.Clear();&#13;&#10;&lt;Variable&gt;.Create(&lt;ArrayStartLength&gt;,&lt;ArrayGrowLength&gt;);" CloneOperation="&lt;IfInDataObject&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="&lt;const&gt; CEasyArray&lt;&lt;Type&gt;&gt;&amp; Get&lt;VariableName&gt;() &lt;const&gt;;" GetMethodDefine="inline &lt;const&gt; CEasyArray&lt;&lt;Type&gt;&gt;&amp; &lt;ClassName&gt;::Get&lt;VariableName&gt;() &lt;const&gt;&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="void Set&lt;VariableName&gt;(const CEasyArray&lt;&lt;Type&gt;&gt;&amp; Value);" SetMethodDefine="inline void &lt;ClassName&gt;::Set&lt;VariableName&gt;(const CEasyArray&lt;&lt;Type&gt;&gt;&amp; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="&lt;Variable&gt;[&lt;Index&gt;]" ConstIndexOperation="&lt;Variable&gt;[&lt;Index&gt;]" ToStringOperation="" DBFieldDefineOperation="`&lt;FieldName&gt;` MEDIUMBLOB NOT NULL" DBInsertFormatOperation="?" DBPutOperation="{&#13;&#10;&tab;StrLen = 0;&#13;&#10;&tab;for (size_t i = 0; i &lt; &lt;Variable&gt;.GetCount(); i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;StrLen += &lt;ArrayElementSize&gt;;&#13;&#10;&tab;}&#13;&#10;&tab;StrLen += CSmartStruct::GetStructMemberSize(0) + 32;&#13;&#10;&#13;&#10;&tab;if (StrBuff.GetBufferSize() &lt; StrLen)&#13;&#10;&tab;&tab;StrBuff.Create(StrLen);&#13;&#10;&#13;&#10;&tab;CSmartStruct Packet(StrBuff.GetBuffer(), StrBuff.GetBufferSize(), true);&#13;&#10;&tab;UINT FailCount = 0;&#13;&#10;&tab;for (size_t i = 0; i &lt; &lt;Variable&gt;.GetCount(); i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;PackOperation&gt;&#13;&#10;&tab;}&#13;&#10;&#13;&#10;&tab;ParamInfo.Type = DB_TYPE_BINARY;&#13;&#10;&tab;ParamInfo.ParamType = DB_PARAM_TYPE_INPUT;&#13;&#10;&tab;ParamInfo.IsNull = false;&#13;&#10;&tab;ParamInfo.Size = Packet.GetDataLen();&#13;&#10;&tab;ParamInfo.DigitSize = 0;&#13;&#10;&tab;ParameterSet.AddParam(ParamInfo, Packet.GetData(), Packet.GetDataLen());&#13;&#10;}" DBGetOperation="" PropertyGridFillOperation="&lt;HaveBindData&gt;&#13;&#10;pPGItem-&gt;AddChildDynamicGroup(&lt;VarShowName&gt;, &quot;&lt;Type&gt;&quot;, 0,&#13;&#10;&tab;&lt;InBindData&gt; FillBindData_&lt;BindParentType&gt;&lt;T&gt;, BindData, StartIndex + FillCount, MemberID, StartIndex + FillCount, pBindParent);&lt;!InBindData&gt;&#13;&#10;&tab; FillBindData_&lt;BindParentType&gt;&lt;&lt;Type&gt;&gt;, &lt;Variable&gt;, 0, &lt;SST_ID&gt;, &lt;Index&gt;, pBindParent);&lt;/InBindData&gt;&#13;&#10;&lt;!HaveBindData&gt;&#13;&#10;pPGItem-&gt;AddChildGroupWithArray(&lt;VarShowName&gt;, &quot;&lt;Type&gt;[]&quot;, PGGF_ADD_BUTTON |  PGGF_DEL_BUTTON, &#13;&#10;&tab;&lt;InBindData&gt;&#13;&#10;&tab;[](IPropertyGridItem* pPGItem, CEasyArray&lt;T&gt;&amp; BindData, UINT StartIndex, UINT MemberID)-&gt;int&#13;&#10;&tab;{&#13;&#10;&tab;&tab;int FillCount = 0;&#13;&#10;&tab;&tab;for(size_t i = StartIndex; i &lt; BindData.GetCount(); i++)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;PropertyGridFillOperation&gt;&#13;&#10;&tab;&tab;}&#13;&#10;&tab;&tab;return FillCount;&#13;&#10;&tab;}, BindData, StartIndex + FillCount, MemberID, StartIndex + FillCount);&#13;&#10;&tab;&lt;!InBindData&gt;&#13;&#10;&tab;[](IPropertyGridItem* pPGItem, CEasyArray&lt;&lt;Type&gt;&gt;&amp; &lt;Variable&gt;, UINT StartIndex, UINT MemberID)-&gt;int&#13;&#10;&tab;{&#13;&#10;&tab;&tab;int FillCount = 0;&#13;&#10;&tab;&tab;for(size_t i = 0; i &lt; &lt;Variable&gt;.GetCount(); i++)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;PropertyGridFillOperation&gt;&#13;&#10;&tab;&tab;}&#13;&#10;&tab;&tab;return FillCount;&#13;&#10;&tab;}, &lt;Variable&gt;, 0, &lt;SST_ID&gt;, &lt;Index&gt;);&#13;&#10;&tab;&lt;/InBindData&gt;&#13;&#10;&#13;&#10;&lt;/HaveBindData&gt;&#13;&#10;" LogSendOperation="" ToLuaOperation="&lt;IfCheckMF&gt;if(Flag&amp;&lt;ModifyFlag&gt;)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;pLuaThread-&gt;PushValue(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;lua_newtable(pLuaThread-&gt;GetLuaState());&#13;&#10;&tab;for (size_t i = 0; i &lt; &lt;Variable&gt;.GetCount(); i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;IfHaveKey&gt;pLuaThread-&gt;PushValue(&lt;Variable&gt;[&lt;Index&gt;].&lt;StructKey&gt;);&lt;/IfHaveKey&gt;&#13;&#10;&tab;&tab;&lt;IfNotHaveKey&gt;pLuaThread-&gt;PushValue(&lt;Index&gt; + 1);&lt;/IfNotHaveKey&gt;&#13;&#10;&tab;&tab;&lt;ToLuaOperation&gt;&#13;&#10;&tab;&tab;lua_settable(pLuaThread-&gt;GetLuaState(), -3);&#13;&#10;&tab;}&#13;&#10;&tab;lua_settable(pLuaThread-&gt;GetLuaState(), Index);&#13;&#10;}" FromLuaOperation="&lt;IfCheckMF&gt;if((Flag&amp;&lt;ModifyFlag&gt;) !=0 )&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;pLuaThread-&gt;PushString(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;lua_gettable(pLuaThread-&gt;GetLuaState(), Index);&#13;&#10;&tab;if(lua_istable(pLuaThread-&gt;GetLuaState(), -1))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;.Clear();&#13;&#10;&tab;&tab;pLuaThread-&gt;PushNil();&#13;&#10;&tab;&tab;while(lua_next(pLuaThread-&gt;GetLuaState(), -2))&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;ElementType&gt;&amp; ArrayElement=*&lt;Variable&gt;.AddEmpty();&#13;&#10;&tab;&tab;&tab;&lt;FromLuaOperation&gt;&#13;&#10;&tab;&tab;&tab;pLuaThread-&gt;Pop(1);&#13;&#10;&tab;&tab;}&#13;&#10;&tab;}&#13;&#10;&tab;pLuaThread-&gt;Pop(1);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag |= &lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" CreateXLSColumnOperation="" CheckXLSColumnOperation="" ToXLSOperation="" FromXLSOperation=""/>
	<OtherConfig CommentPrefix="//" LocalVariableDefinePrefix="" MemberVariablePrefix="" DefaultPacketName="Packet" DefaultPacketMemberName="PacketMember" SupportBigInt="false" ForceExportAll="false"/>
</Config>
