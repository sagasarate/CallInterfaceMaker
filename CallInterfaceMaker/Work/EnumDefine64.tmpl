<Description>
enum <EnumName>:UINT64
{
	<EnumMembers>
};

<IfExportEnumList>
const UINT g_<EnumName>_COUNT = <EnumMemberCount>;
const UINT64 g_<EnumName>_LIST[<EnumMemberCount>]={<EnumValues>};
</IfExportEnumList>

<IfExportEnumStrList>
const LPCTSTR g_sz<EnumName>[<EnumMemberCount>]={<EnumStrValues>};
</IfExportEnumStrList>

<IfExportEnumTransFn>

<IsFlagEnum>
inline const CEasyString <EnumName>_To_Str(UINT64 Value)
{
	CEasyString Str;
	<EnumToStrs>
	return Str;
}

inline UINT64 Str_To_<EnumName>(LPCTSTR Str)
{
	UINT64 Flag = 0;
	CStringSplitter Splitter(Str, '|');
	for (UINT i = 0; i < Splitter.GetCount(); i++)
	{
		<StrToEnums>
	}	
	return Flag;
}
<!IsFlagEnum>
inline LPCTSTR <EnumName>_To_Str(UINT64 Value)
{
	<HaveEnumStrArray>
	if (Value < <EnumMemberCount>)
	{
		return g_sz<EnumName>[Value];
	}
	</HaveEnumStrArray>
	<NotHaveEnumStrArray>
	switch(Value)
	{
		<EnumToStrs>
	}
	</NotHaveEnumStrArray>
	return _T("未知");
}

inline UINT64 Str_To_<EnumName>(LPCTSTR Str)
{
	<StrToEnums>
	return <EnumName>::<LastEnumValue>;
}
</IsFlagEnum>

</IfExportEnumTransFn>

<IfExportBindDataProcess>
#ifdef ENABLE_EDITOR_AUTOMAKE
template<typename T>
inline bool FillBindData_<EnumName>(IPropertyGridItem* pPGItem, UINT64 FillType, CEasyArray<T>& BindData, UINT StartIndex, UINT MemberID)
{
	//TCHAR CharBuffer[64];
	switch(FillType)
	{
	<BindDataFillOperations>
	default:
		return false;
	}
	return true;
}
#endif
</IfExportBindDataProcess>
