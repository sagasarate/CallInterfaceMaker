<?xml version="1.0" encoding="utf-8"?>
<TypeDef>
	<Type Name="bool" CType="bool" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(byte))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Boolean.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add(&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Boolean)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (bool)StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Boolean)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (bool)ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt; = false;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Text = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !bool.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="char" CType="sbyte" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(sbyte))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;SByte.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((int)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (sbyte)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (sbyte)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !sbyte.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="short" CType="short" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(short))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Int16.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((int)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (short)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (short)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !short.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="int" CType="int" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(int))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Int32.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add(&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = ((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !int.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="BYTE" CType="byte" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(byte))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Byte.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((int)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (byte)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (byte)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !byte.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="WORD" CType="ushort" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(ushort))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt16.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((int)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (ushort)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (ushort)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !ushort.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="UINT" CType="uint" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(uint))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt32.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((int)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (uint)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (uint)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !uint.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="INT64" CType="long" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(long))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Int64.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add(&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = ((long)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = ((long)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !long.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="UINT64" CType="ulong" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(ulong))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt64.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((long)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (ulong)((long)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (ulong)((long)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !ulong.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="String" CType="string" Flag="192" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStringMemberSize(&lt;Variable&gt;)" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;;&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Attr&lt;VariableName&gt;.Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add(&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.String)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (string)StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.String)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (string)ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=string.Empty" InitOperation="&lt;Variable&gt;=string.Empty;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Text = &lt;Variable&gt;;&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;&lt;Variable&gt; = XLSRange[StartRow, Col].Value;&#13;&#10;"/>
	<Type Name="CSmartStruct" CType="CSmartStruct" Flag="196" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;.CloneFrom(&lt;PacketMember&gt;);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStructMemberSize(&lt;Variable&gt;.GetDataLen())" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new &lt;Type&gt;()" InitOperation="" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.CloneFrom(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="ColCount++;&#13;&#10;" FromXLSOperation=""/>
	<Type Name="OBJECT_ID" CType="OBJECT_ID" Flag="0" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;.ID)) FailCount++;" UnpackOperation="&lt;Variable&gt;.ID=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize((uint)Marshal.SizeOf(typeof(OBJECT_ID)))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ID.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt64.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;.ID);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=(long)&lt;Variable&gt;.ID;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((long)&lt;Variable&gt;.ID);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt;.ID = (ulong)((long)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt;.ID = (ulong)((long)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;.ID=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="ColCount++;&#13;&#10;" FromXLSOperation=""/>
	<Type Name="float" CType="float" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(float))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Single.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((double)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Float)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (float)((double)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Float)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (float)((double)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !float.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="ByteArray" CType="byte[]" Flag="196" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetBinaryMemberSize((uint)&lt;Variable&gt;.Length)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new byte[0]" InitOperation="" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="ColCount++;&#13;&#10;" FromXLSOperation=""/>
	<Type Name="TimeStamp" CType="uint" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(uint))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;UInt32.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((int)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (uint)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (uint)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !uint.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="CSmartArray" CType="CSmartArray" Flag="196" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;.CloneFrom(&lt;PacketMember&gt;);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetArrayMemberSize(&lt;Variable&gt;.GetDataLen())" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new &lt;Type&gt;()" InitOperation="" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;);&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.CloneFrom(Value);&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="ColCount++;&#13;&#10;" FromXLSOperation=""/>
	<Type Name="double" CType="double" Flag="64" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(double))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = &lt;Variable&gt;.ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;Double.TryParse(Attr&lt;VariableName&gt;.Value,out &lt;Variable&gt;);&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=&lt;Variable&gt;;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add((double)&lt;Variable&gt;);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Float)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (double)StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }&#13;&#10;    &#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Float)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (double)ArrayElementNode;&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &lt; 0 || !double.TryParse(XLSRange[StartRow, Col].Value, out &lt;Variable&gt;))&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<Type Name="Variant" CType="CVariedValue" Flag="192" PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=&lt;PacketMember&gt;;" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetVariedMemberSize(&lt;Variable&gt;)" ToXMLOperation="" FromXMLOperation="" ToJsonOperation="&lt;IfNotArray&gt;StructNode[&quot;&lt;VariableName&gt;&quot;] = &lt;Variable&gt;.ToJson();&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;ArrayNode.Add(&lt;Variable&gt;.ToJson());&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;&tab;&lt;Variable&gt; = CVariedValue.FromJson(StructNode[&quot;&lt;VariableName&gt;&quot;]); &#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;&lt;Variable&gt; = CVariedValue.FromJson(ArrayElementNode); &#13;&#10;&lt;/IfArray&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new &lt;Type&gt;()" InitOperation="" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt;;&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Text = &lt;Variable&gt;.ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(Col &gt;= 0)&#13;&#10;{&#13;&#10;&tab;CVariedValue VariedValue = CVariedValue.FromString(XLSRange[StartRow, Col].Value, 4);&#13;&#10;&tab;if(VariedValue != null)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = VariedValue;&#13;&#10;&tab;}&#13;&#10;&tab;else&#13;&#10;&tab;{&#13;&#10;&tab;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;&tab;return false;&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}"/>
</TypeDef>
