<?xml version="1.0" encoding="gb2312"?>
<Config>
	<InterfaceHeaderExport IsExport="false" FileExt="cs"/>
	<StructExport IsExport="true" FileExt="cs"/>
	<EnumExport IsExport="true" FileExt="cs"/>
	<ConstExport IsExport="true" FileExt="cs"/>
	<DataStructHeaderExport IsExport="false" FileExt=""/>
	<InterfaceExport IsExport="true" FileExt="cs"/>
	<CallHeaderExport IsExport="false" FileExt=""/>
	<CallSourceExport IsExport="true" FileExt="cs"/>
	<HandlerHeaderExport IsExport="false" FileExt=""/>
	<HandlerSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectHeaderExport IsExport="false" FileExt=""/>
	<DataObjectSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectModifyFlagsExport IsExport="true" FileExt="cs"/>
	<DefaultStructGenerateOperations PackOperation="uint BufferSize=0;&#13;&#10;int BufferPtr=Packet.PrepareMember(ref BufferSize);&#13;&#10;CSmartStruct SubPacket=new CSmartStruct(Packet.GetData(),(uint)BufferPtr,BufferSize,true);&#13;&#10;&lt;IfNotDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket)) FailCount++;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket,MemberFlags)) FailCount++;&lt;/IfDataObject&gt;&#13;&#10;Packet.FinishMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,SubPacket.GetDataLen());" UnpackOperation="&lt;IfNotDataObject&gt;&lt;Variable&gt;.ParsePacket(Value);&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&lt;Variable&gt;.ParsePacket(Value,MemberFlags);&lt;/IfDataObject&gt;&#13;&#10;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;" SizeCaculateOperation="&lt;IfNotDataObject&gt;CSmartStruct.GetStructMemberSize(((&lt;Type&gt;)&lt;Variable&gt;).GetSmartStructSize())&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;CSmartStruct.GetStructMemberSize(((&lt;Type&gt;)&lt;Variable&gt;).GetSmartStructSize(MemberFlags))&lt;/IfDataObject&gt;" ToXMLOperation="&lt;IfNotDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode=NodeSave.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;NodeSave.AppendChild(StructNode);&tab;&#13;&#10;&lt;Variable&gt;.ToXML(StructNode);&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode=NodeSave.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;NodeSave.AppendChild(StructNode);&tab;&#13;&#10;&lt;Variable&gt;.ToXML(StructNode,MemberFlags);&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfDataObject&gt;" FromXMLOperation="&lt;IfNotDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode= NodeSave.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(StructNode!=null)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.FromXML(StructNode);&#13;&#10;}&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode= NodeSave.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(StructNode!=null)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.FromXML(StructNode,MemberFlags);&#13;&#10;}&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;" ToJsonOperation="JsonData DataNode = new JsonData();&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;&lt;Variable&gt;.ToJson(ref DataNode);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;&lt;Variable&gt;.ToJson(ref DataNode, MemberFlags);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;] = DataNode;&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;ArrayNode.Add(DataNode);&#13;&#10;&lt;/IfArray&gt;" FromJsonOperation="&lt;IfNotArray&gt;&#13;&#10;if (((IDictionary) StructNode).Contains(&quot;&lt;VariableName&gt;&quot;))&#13;&#10;{&#13;&#10;    JsonData DateNode = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;    if(DateNode.IsObject)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt;.FromJson(DateNode);&#13;&#10;    }&#13;&#10;}&#13;&#10;&lt;/IfNotArray&gt;&#13;&#10;&lt;IfArray&gt;&#13;&#10;if(ArrayElementNode.IsObject)&#13;&#10;{&#13;&#10;    &lt;Variable&gt;.FromJson(ArrayElementNode);&#13;&#10;}&#13;&#10;&lt;/IfArray&gt;&#13;&#10;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new &lt;Type&gt;();" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;IfNotDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;.Clone();&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&lt;IfDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;,MemberFlags);&lt;/IfDataObject&gt;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=(&lt;Type&gt;)Value.Clone();&#13;&#10;&tab;&lt;IfMonitorUpdate&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation=""/>
	<DefaultEnumGenerateOperations PackOperation="&lt;IfNot64Bit&gt;if(!Packet.AddMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,(uint)&lt;Variable&gt;)) FailCount++;&lt;/IfNot64Bit&gt;&#13;&#10;&lt;If64Bit&gt;if(!Packet.AddMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,(ulong)&lt;Variable&gt;)) FailCount++;&lt;/If64Bit&gt;" UnpackOperation="&lt;IfNot64Bit&gt;&lt;Variable&gt;=(uint)Value;&lt;/IfNot64Bit&gt;&#13;&#10;&lt;If64Bit&gt;&lt;Variable&gt;=(ulong)Value;&lt;/If64Bit&gt;&#13;&#10;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;" SizeCaculateOperation="&lt;IfNot64Bit&gt;CSmartStruct.GetFixMemberSize(sizeof(uint))&lt;/IfNot64Bit&gt;&#13;&#10;&lt;If64Bit&gt;CSmartStruct.GetFixMemberSize(sizeof(ulong))&lt;/If64Bit&gt;" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&lt;IfNot64Bit&gt;Attr&lt;VariableName&gt;.Value = ((uint)&lt;Variable&gt;).ToString();&lt;/IfNot64Bit&gt;&#13;&#10;&lt;If64Bit&gt;Attr&lt;VariableName&gt;.Value = ((ulong)&lt;Variable&gt;).ToString();&lt;/If64Bit&gt;&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="&#13;&#10;&lt;If64Bit&gt;&lt;/If64Bit&gt;&#13;&#10;XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;&lt;IfNot64Bit&gt;&#13;&#10;&tab;uint ParseTemp = 0;&#13;&#10;&tab;Int32.TryParse(Attr&lt;VariableName&gt;.Value,out ParseTemp);&#13;&#10;&tab;&lt;Variable&gt; = ParseTemp;&#13;&#10;&tab;&lt;/IfNot64Bit&gt;&#13;&#10;&tab;&lt;If64Bit&gt;&#13;&#10;&tab;ulong ParseTemp = 0;&#13;&#10;&tab;Uint64.TryParse(Attr&lt;VariableName&gt;.Value,out ParseTemp);&#13;&#10;&tab;&lt;Variable&gt; = ParseTemp;&#13;&#10;&tab;&lt;/If64Bit&gt;&#13;&#10;&tab;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&#13;&#10;}" ToJsonOperation="" FromJsonOperation="" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfMonitorUpdate&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation=""/>
	<ArrayDefineConfig PackOperation="&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&#13;&#10;{&#13;&#10;&tab;CSmartStruct PacketSave=Packet;&#13;&#10;&tab;uint SubBufferSize=0;&#13;&#10;&tab;int SubBufferPtr=PacketSave.PrepareMember(ref SubBufferSize);&#13;&#10;&tab;Packet=new CSmartStruct(PacketSave.GetData(),(uint)SubBufferPtr,SubBufferSize,true);&#13;&#10;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;PackOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;PacketSave.FinishMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,Packet.GetDataLen());&#13;&#10;&tab;Packet=PacketSave;&#13;&#10;}" UnpackOperation="case (ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;:&#13;&#10;&tab;&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&#13;&#10;&tab;{&#13;&#10;&tab;&tab;CSmartStruct PacketSave=Packet;&#13;&#10;&tab;&tab;CSmartValue ValueSave=Value;&#13;&#10;&tab;&tab;&lt;Variable&gt;.Clear();&tab;&tab;&#13;&#10;&tab;&tab;Packet=ValueSave;&#13;&#10;&tab;&tab;int SubPos=Packet.GetFirstMemberPosition();&#13;&#10;&tab;&tab;while(SubPos&gt;0)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;ushort SubMemberID=0;&#13;&#10;&tab;&tab;&tab;Value=Packet.GetNextMember(ref SubPos,ref SubMemberID);&#13;&#10;&tab;&tab;&tab;switch(SubMemberID)&#13;&#10;&tab;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;case (ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;:&#13;&#10;&tab;&tab;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;&#13;&#10;&tab;&tab;&tab;&tab;&tab;&lt;UnpackOperation&gt;&#13;&#10;&tab;&tab;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;&tab;&tab;}&#13;&#10;&tab;&tab;&tab;&tab;break;&#13;&#10;&tab;&tab;&tab;}&#13;&#10;&tab;&tab;}&#13;&#10;&tab;&tab;Packet=PacketSave;&#13;&#10;&tab;&tab;Value=ValueSave;&#13;&#10;&tab;}&#13;&#10;&tab;break;" SizeCaculateOperation="for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;{&#13;&#10;&tab;Size+=&lt;ArrayElementSize&gt;;&#13;&#10;}&#13;&#10;Size+=CSmartStruct.GetStructMemberSize(0);" ToXMLOperation="&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&#13;&#10;{&#13;&#10;&tab;XmlNode NodeSaveArray=StructNode;&#13;&#10;&tab;XmlNode NodeArray=NodeSaveArray.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;NodeSaveArray.AppendChild(NodeArray);&#13;&#10;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;StructNode =  NodeArray.OwnerDocument.CreateElement(&quot;ArrayElement&quot;);&#13;&#10;&tab;&tab;NodeArray.AppendChild(StructNode);&#13;&#10;&tab;&tab;&lt;ToXMLOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode= NodeSaveArray;&#13;&#10;}" FromXMLOperation="&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&#13;&#10;{&#13;&#10;&tab;XmlNode NodeSaveArray=StructNode;&#13;&#10;&tab;XmlNode NodeArray= NodeSaveArray.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;if(NodeArray!=null)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;foreach(XmlNode ChildNode in NodeArray.ChildNodes)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;StructNode =  ChildNode;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromXMLOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;&tab;StructNode=NodeSaveArray;&#13;&#10;}" ToJsonOperation="&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&#13;&#10;{&#13;&#10;&tab;JsonData ArrayNode = new JsonData();    &#13;&#10;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;ToJsonOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode[&quot;&lt;VariableName&gt;&quot;] = ArrayNode;&#13;&#10;}" FromJsonOperation="&lt;IfNeedCheckModifyFlag&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfNeedCheckModifyFlag&gt;&#13;&#10;{&#13;&#10;    JsonData ArrayNode = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;&tab;if(ArrayNode != null &amp;&amp; ArrayNode.IsArray)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;foreach(JsonData ArrayElementNode in ArrayNode)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromJsonOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;}" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="List&lt;&lt;Type&gt;&gt;&lt;Space&gt;&lt;Variable&gt;=new List&lt;&lt;Type&gt;&gt;();" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;IfNotRefType&gt;&lt;LeftValue&gt;&lt;Variable&gt;=new List&lt;&lt;Type&gt;&gt;(&lt;RightValue&gt;&lt;Variable&gt;);&lt;/IfNotRefType&gt;&#13;&#10;&tab;&lt;IfRefType&gt;&lt;LeftValue&gt;&lt;Variable&gt;.Clear();&#13;&#10;&tab;for (int i = 0; i &lt; &lt;RightValue&gt;&lt;Variable&gt;.Count;i++ )&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Type&gt; ElementObject = &lt;RightValue&gt;&lt;Variable&gt;[i];&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.Add(ElementObject.Clone() as &lt;Type&gt;);&#13;&#10;&tab;}&lt;/IfRefType&gt;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfMonitorUpdate&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public List&lt;&lt;Type&gt;&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(List&lt;&lt;Type&gt;&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;IfNotRefType&gt;&lt;Variable&gt;= new List&lt;&lt;Type&gt;&gt;(Value);&lt;/IfNotRefType&gt;&#13;&#10;&tab;&lt;IfRefType&gt;&lt;Variable&gt;.Clear();&#13;&#10;&tab;for (int i = 0; i &lt; Value.Count;i++ )&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Type&gt; ElementObject = Value[i];&#13;&#10;&tab;&tab;&lt;Variable&gt;.Add(ElementObject.Clone() as &lt;Type&gt;);&#13;&#10;&tab;}&lt;/IfRefType&gt;&#13;&#10;&tab;&lt;IfMonitorUpdate&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfMonitorUpdate&gt;&#13;&#10;}" IndexOperation="((&lt;Type&gt;)&lt;Variable&gt;[&lt;Index&gt;])" ConstIndexOperation="((&lt;Type&gt;)&lt;Variable&gt;[&lt;Index&gt;])"/>
</Config>
