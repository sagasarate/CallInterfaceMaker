<?xml version="1.0" encoding="utf-8"?>
<Config>
	<OneFileExport IsExport="false" FileExt="h"/>
	<InterfaceHeaderExport IsExport="false" FileExt="cs"/>
	<StructExport IsExport="true" FileExt="cs"/>
	<EnumExport IsExport="true" FileExt="cs"/>
	<ConstExport IsExport="true" FileExt="cs"/>
	<DataStructHeaderExport IsExport="false" FileExt=""/>
	<InterfaceExport IsExport="true" FileExt="cs"/>
	<CallHeaderExport IsExport="false" FileExt=""/>
	<CallSourceExport IsExport="true" FileExt="cs"/>
	<HandlerHeaderExport IsExport="false" FileExt=""/>
	<HandlerSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectHeaderExport IsExport="false" FileExt=""/>
	<DataObjectSourceExport IsExport="true" FileExt="cs"/>
	<DataObjectModifyFlagsHeaderExport IsExport="false" FileExt=""/>
	<DataObjectModifyFlagsSourceExport IsExport="true" FileExt="cs"/>
	<DefaultStructGenerateOperations PackOperation="CSmartStruct SubPacket=&lt;Packet&gt;.PrepareSubStruct();&#13;&#10;&lt;IfNotDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket))&#13;&#10;&tab;FailCount++;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;if(!&lt;Variable&gt;.MakePacket(SubPacket,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;))&#13;&#10;&tab;FailCount++;&lt;/IfDataObject&gt;&#13;&#10;&lt;Packet&gt;.FinishMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;SubPacket.GetDataLen());" UnpackOperation="&lt;IfNotDataObject&gt;&lt;Variable&gt;.ParsePacket(&lt;PacketMember&gt;);&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&lt;Variable&gt;.ParsePacket(&lt;PacketMember&gt;,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;" SizeCaculateOperation="&lt;IfNotDataObject&gt;&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStructMemberSize(((&lt;Type&gt;)&lt;Variable&gt;).GetSmartStructSize())&lt;/IfNotDataObject&gt;&lt;IfDataObject&gt;&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetStructMemberSize(((&lt;Type&gt;)&lt;Variable&gt;).GetSmartStructSize(&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;))&lt;/IfDataObject&gt;" ToXMLOperation="&lt;IfNotDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode=NodeSave.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;NodeSave.AppendChild(StructNode);&tab;&#13;&#10;&lt;Variable&gt;.ToXML(StructNode);&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode=NodeSave.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;NodeSave.AppendChild(StructNode);&tab;&#13;&#10;&lt;Variable&gt;.ToXML(StructNode,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfDataObject&gt;" FromXMLOperation="&lt;IfNotDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode= NodeSave.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(StructNode!=null)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.FromXML(StructNode);&#13;&#10;}&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;XmlNode NodeSave=StructNode;&#13;&#10;StructNode= NodeSave.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;if(StructNode!=null)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;.FromXML(StructNode,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;}&#13;&#10;StructNode= NodeSave;&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;" ToJsonOperation="JObject DataNode = new JObject();&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;&lt;Variable&gt;.ToJson(DataNode);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;&lt;Variable&gt;.ToJson(DataNode, &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IsArray&gt;&#13;&#10;ArrayNode.Add(DataNode);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;] = DataNode;&#13;&#10;&lt;/IsArray&gt;" FromJsonOperation="&lt;IsArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Object)&#13;&#10;{&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(ArrayElementNode as JObject, &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(ArrayElementNode as JObject);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;}&#13;&#10;&lt;!IsArray&gt;&#13;&#10;JToken DateNode = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(DateNode != null &amp;&amp; DateNode.Type == JTokenType.Object)&#13;&#10;{&#13;&#10;&lt;IfDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(DateNode as JObject, &lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&#13;&#10;&lt;/IfDataObject&gt;&#13;&#10;&lt;IfNotDataObject&gt;&#13;&#10;    &lt;Variable&gt;.FromJson(DateNode as JObject);&#13;&#10;&lt;/IfNotDataObject&gt;&#13;&#10;}&#13;&#10;&lt;/IsArray&gt;&#13;&#10;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;" ReferenceDefine="&lt;Type&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;=new &lt;Type&gt;()" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;IfNotDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;.Clone();&lt;/IfNotDataObject&gt;&#13;&#10;&tab;&lt;IfDataObject&gt;&lt;LeftValue&gt;&lt;Variable&gt;.CloneFrom(&lt;RightValue&gt;&lt;Variable&gt;,&lt;IfInDataObject&gt;MemberFlags&lt;/IfInDataObject&gt;&lt;IfNotInDataObject&gt;DATA_OBJECT_MODIFY_FLAGS.&lt;PackFlag&gt;&lt;/IfNotInDataObject&gt;);&lt;/IfDataObject&gt;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=(&lt;Type&gt;)Value.Clone();&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt; + ConvertorTools.GetAdditionalDesc(&quot;&lt;VariableName&gt;&quot;, typeof(&lt;Type&gt;), false);&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Text = ConvertorTools.StructToString(&lt;Variable&gt;);&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange, &quot;&lt;VariableName&gt;&quot;);&#13;&#10;if (Col &gt;= 0)&#13;&#10;{&#13;&#10;&tab;if (XLSRange[StartRow, Col].HasFormula)&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].EnvalutedValue;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].Value;&#13;&#10;&tab;if (!ConvertorTools.StringToStruct(ValueStr, &lt;Variable&gt;))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;&tab;return false;&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}"/>
	<DefaultEnumGenerateOperations PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;(uint)&lt;Variable&gt;)) FailCount++;&#13;&#10;" UnpackOperation="&lt;Variable&gt;=(&lt;Type&gt;)((uint)&lt;PacketMember&gt;);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(int))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = ((uint)&lt;Variable&gt;).ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&#13;&#10;&tab;uint ParseTemp = 0;&#13;&#10;&tab;Int32.TryParse(Attr&lt;VariableName&gt;.Value,out ParseTemp);&#13;&#10;&tab;&lt;Variable&gt; = ParseTemp;&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IsArray&gt;&#13;&#10;ArrayNode.Add((uint)&lt;Variable&gt;);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=(uint)&lt;Variable&gt;;&#13;&#10;&lt;/IsArray&gt;" FromJsonOperation="&lt;IsArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; = (&lt;Type&gt;)((int)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;!IsArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (&lt;Type&gt;)((int)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }    &#13;&#10;}&#13;&#10;&lt;/IsArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt; + &quot;\n&quot; + &lt;Type&gt;_UTILS.GetDescs();&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = ((uint)&lt;Variable&gt;).ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange, &quot;&lt;VariableName&gt;&quot;);&#13;&#10;if (Col &gt;= 0)&#13;&#10;{&#13;&#10;&tab;uint EnumValue = (uint)&lt;Variable&gt;;&#13;&#10;&tab;if (XLSRange[StartRow, Col].HasFormula)&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].EnvalutedValue;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].Value;&#13;&#10;&tab;if (uint.TryParse(ValueStr, out EnumValue))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = (&lt;Type&gt;)EnumValue;&#13;&#10;&tab;}&#13;&#10;&tab;else&#13;&#10;&tab;{&#13;&#10;&tab;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;&tab;return false;&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}"/>
	<DefaultEnum64GenerateOperations PackOperation="if(!&lt;Packet&gt;.AddMember(&lt;IfNotInArray&gt;(ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,&lt;/IfNotInArray&gt;(long)&lt;Variable&gt;)) FailCount++;" UnpackOperation="&lt;Variable&gt;=(&lt;Type&gt;)((ulong)&lt;PacketMember&gt;);" SizeCaculateOperation="&lt;IfInArray&gt;CSmartArray&lt;/IfInArray&gt;&lt;IfNotInArray&gt;CSmartStruct&lt;/IfNotInArray&gt;.GetFixMemberSize(sizeof(long))" ToXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.OwnerDocument.CreateAttribute(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;Attr&lt;VariableName&gt;.Value = ((ulong)&lt;Variable&gt;).ToString();&#13;&#10;StructNode.Attributes.Append(Attr&lt;VariableName&gt;);" FromXMLOperation="XmlAttribute Attr&lt;VariableName&gt;=StructNode.Attributes[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;if(Attr&lt;VariableName&gt;!=null)&#13;&#10;{&tab;&#13;&#10;&tab;ulong ParseTemp = 0;&#13;&#10;&tab;Uint64.TryParse(Attr&lt;VariableName&gt;.Value,out ParseTemp);&#13;&#10;&tab;&lt;Variable&gt; = ParseTemp;&#13;&#10;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" ToJsonOperation="&lt;IsArray&gt;&#13;&#10;ArrayNode.Add((uint)&lt;Variable&gt;);&#13;&#10;&lt;!IsArray&gt;&#13;&#10;StructNode[&quot;&lt;VariableName&gt;&quot;]=(long)&lt;Variable&gt;;&#13;&#10;&lt;/IsArray&gt;" FromJsonOperation="&lt;IsArray&gt;&#13;&#10;if(ArrayElementNode.Type == JTokenType.Integer)&#13;&#10;{&#13;&#10;    &lt;Variable&gt; =  (&lt;Type&gt;)((long)ArrayElementNode);&#13;&#10;    &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}&#13;&#10;&lt;!IsArray&gt;&#13;&#10;if (StructNode[&quot;&lt;VariableName&gt;&quot;] != null)&#13;&#10;{&#13;&#10;    if(StructNode[&quot;&lt;VariableName&gt;&quot;].Type == JTokenType.Integer)&#13;&#10;    {&#13;&#10;        &lt;Variable&gt; = (&lt;Type&gt;)((long)StructNode[&quot;&lt;VariableName&gt;&quot;]);&#13;&#10;        &lt;IfUpdateMF&gt;UpdateFlag |= (ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;    }    &#13;&#10;}&#13;&#10;&lt;/IsArray&gt;" ReferenceDefine="ref &lt;Type&gt;" ReferenceUse="ref &lt;Variable&gt;" VariableDefine="&lt;Type&gt;&lt;Space&gt;&lt;Variable&gt;" InitOperation="&lt;Variable&gt;=0;" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;LeftValue&gt;&lt;Variable&gt;=&lt;RightValue&gt;&lt;Variable&gt;;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public &lt;Type&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(&lt;Type&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;Variable&gt;=Value;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="" ConstIndexOperation="" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt; + &quot;\n&quot; + &lt;Type&gt;_UTILS.GetDescs();&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;&#13;&#10;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Value = ((ulong)&lt;Variable&gt;).ToString();&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange, &quot;&lt;VariableName&gt;&quot;);&#13;&#10;if (Col &gt;= 0)&#13;&#10;{&#13;&#10;&tab;ulong EnumValue = (ulong)&lt;Variable&gt;;&#13;&#10;&tab;if (XLSRange[StartRow, Col].HasFormula)&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].EnvalutedValue;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].Value;&#13;&#10;&tab;if (ulong.TryParse(ValueStr, out EnumValue))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt; = (&lt;Type&gt;)EnumValue;&#13;&#10;&tab;}&#13;&#10;&tab;else&#13;&#10;&tab;{&#13;&#10;&tab;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;&tab;return false;&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;"/>
	<ArrayDefineConfig PackOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;CSmartArray ArrayPacket = &lt;Packet&gt;.PrepareSubArray();&#13;&#10;&tab;&lt;IfIsBaseType&gt;ArrayPacket.AddArray(&lt;Variable&gt;);&lt;/IfIsBaseType&gt;&#13;&#10;&tab;&lt;IfIsNotBaseType&gt;&lt;ChangePacketName=ArrayPacket&gt;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;PackOperation&gt;&#13;&#10;&tab;}&lt;/IfIsNotBaseType&gt;&#13;&#10;&tab;&lt;Packet&gt;.FinishMember((ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;,ArrayPacket.GetDataLen());&#13;&#10;}" UnpackOperation="case (ushort)&lt;SST_NAME&gt;.&lt;SST_ID&gt;:&#13;&#10;&tab;&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Variable&gt;.Clear();&#13;&#10;&tab;&tab;CSmartArray ArrayPacket=&lt;PacketMember&gt;;&#13;&#10;&tab;&tab;&lt;IfIsBaseType&gt;ArrayPacket.GetArray(&lt;Variable&gt;);&lt;/IfIsBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfIsNotBaseType&gt;int SubPos=ArrayPacket.GetFirstMemberPosition();&#13;&#10;&tab;&tab;while(SubPos&gt;0)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;CSmartValue ArrayMember=ArrayPacket.GetNextMember(ref SubPos);&lt;ChangePacketMemberName=ArrayMember&gt;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;UnpackOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&lt;/IfIsNotBaseType&gt;&#13;&#10;&tab;&tab;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;&tab;}&#13;&#10;&tab;break;" SizeCaculateOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;&lt;IfCheckMF&gt;{&lt;/IfCheckMF&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&lt;IfIsFixLenType&gt;_PackSize += &lt;ArrayElementSize&gt;*(uint)&lt;Variable&gt;.Count;&lt;/IfIsFixLenType&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&lt;IfIsVariableLenType&gt;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;{&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;&tab;_PackSize += &lt;ArrayElementSize&gt;;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;}&lt;/IfIsVariableLenType&gt;&#13;&#10;&lt;IfCheckMF&gt;&tab;&lt;/IfCheckMF&gt;_PackSize += CSmartStruct.GetArrayMemberSize(0);&#13;&#10;&lt;IfCheckMF&gt;}&lt;/IfCheckMF&gt;" ToXMLOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;XmlNode NodeSaveArray=StructNode;&#13;&#10;&tab;XmlNode NodeArray=NodeSaveArray.OwnerDocument.CreateElement(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;NodeSaveArray.AppendChild(NodeArray);&#13;&#10;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;StructNode =  NodeArray.OwnerDocument.CreateElement(&quot;ArrayElement&quot;);&#13;&#10;&tab;&tab;NodeArray.AppendChild(StructNode);&#13;&#10;&tab;&tab;&lt;ToXMLOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode= NodeSaveArray;&#13;&#10;}" FromXMLOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;XmlNode NodeSaveArray=StructNode;&#13;&#10;&tab;XmlNode NodeArray= NodeSaveArray.SelectSingleNode(&quot;&lt;VariableName&gt;&quot;);&#13;&#10;&tab;if(NodeArray!=null)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;foreach(XmlNode ChildNode in NodeArray.ChildNodes)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;StructNode =  ChildNode;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromXMLOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;&tab;StructNode=NodeSaveArray;&#13;&#10;}" ToJsonOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;&tab;JArray ArrayNode = new JArray();    &#13;&#10;&tab;for(int i=0;i&lt;&lt;Variable&gt;.Count;i++)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;ToJsonOperation&gt;&#13;&#10;&tab;}&tab;&#13;&#10;&tab;StructNode[&quot;&lt;VariableName&gt;&quot;] = ArrayNode;&#13;&#10;}" FromJsonOperation="&lt;IfCheckMF&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfCheckMF&gt;&#13;&#10;{&#13;&#10;    JToken ArrayNode = StructNode[&quot;&lt;VariableName&gt;&quot;];&#13;&#10;&tab;if(ArrayNode != null &amp;&amp; ArrayNode.Type == JTokenType.Array)&#13;&#10;&tab;{&#13;&#10;&tab;&tab;foreach(JToken ArrayElementNode in ArrayNode)&#13;&#10;&tab;&tab;{&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableDefine&gt;;&#13;&#10;&tab;&tab;&tab;&lt;ArrayElementVariableInit&gt;&#13;&#10;&tab;&tab;&tab;&lt;FromJsonOperation&gt;&#13;&#10;&tab;&tab;&tab;&lt;Variable&gt;.Add(ArrayElement);&#13;&#10;&tab;&tab;}&tab;&#13;&#10;&tab;}&#13;&#10;}" ReferenceDefine="List&lt;&lt;Type&gt;&gt;" ReferenceUse="&lt;Variable&gt;" VariableDefine="List&lt;&lt;Type&gt;&gt;&lt;Space&gt;&lt;Variable&gt;=new List&lt;&lt;Type&gt;&gt;()" InitOperation="&lt;Variable&gt;.Clear();" CloneOperation="&lt;IfInDataObject&gt;if((Flag&amp;(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;)!=0)&lt;/IfInDataObject&gt;&#13;&#10;{&#13;&#10;&tab;&lt;IfNotRefType&gt;&lt;LeftValue&gt;&lt;Variable&gt;=new List&lt;&lt;Type&gt;&gt;(&lt;RightValue&gt;&lt;Variable&gt;);&lt;/IfNotRefType&gt;&#13;&#10;&tab;&lt;IfRefType&gt;&lt;LeftValue&gt;&lt;Variable&gt;.Clear();&#13;&#10;&tab;for (int i = 0; i &lt; &lt;RightValue&gt;&lt;Variable&gt;.Count;i++ )&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Type&gt; ElementObject = &lt;RightValue&gt;&lt;Variable&gt;[i];&#13;&#10;&tab;&tab;&lt;LeftValue&gt;&lt;Variable&gt;.Add(ElementObject.Clone() as &lt;Type&gt;);&#13;&#10;&tab;}&lt;/IfRefType&gt;&#13;&#10;&tab;&lt;IfInDataObject&gt;&lt;IfUpdateMF&gt;UpdateFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&lt;/IfInDataObject&gt;&#13;&#10;}" GetMethodDeclare="" GetMethodDefine="public List&lt;&lt;Type&gt;&gt; Get&lt;VariableName&gt;()&#13;&#10;{&#13;&#10;&tab;return &lt;Variable&gt;;&#13;&#10;}" SetMethodDeclare="" SetMethodDefine="public void Set&lt;VariableName&gt;(List&lt;&lt;Type&gt;&gt; Value)&#13;&#10;{&#13;&#10;&tab;&lt;IfNotRefType&gt;&lt;Variable&gt;= new List&lt;&lt;Type&gt;&gt;(Value);&lt;/IfNotRefType&gt;&#13;&#10;&tab;&lt;IfRefType&gt;&lt;Variable&gt;.Clear();&#13;&#10;&tab;for (int i = 0; i &lt; Value.Count;i++ )&#13;&#10;&tab;{&#13;&#10;&tab;&tab;&lt;Type&gt; ElementObject = Value[i];&#13;&#10;&tab;&tab;&lt;Variable&gt;.Add(ElementObject.Clone() as &lt;Type&gt;);&#13;&#10;&tab;}&lt;/IfRefType&gt;&#13;&#10;&tab;&lt;IfUpdateMF&gt;m_ModifyFlag|=(ulong)&lt;ModifyFlagEnumName&gt;.&lt;ModifyFlag&gt;;&lt;/IfUpdateMF&gt;&#13;&#10;}" IndexOperation="((&lt;Type&gt;)&lt;Variable&gt;[&lt;Index&gt;])" ConstIndexOperation="(&lt;Variable&gt;[&lt;Index&gt;])" ToStringOperation="" DBFieldDefineOperation="" DBInsertFormatOperation="" DBPutOperation="" DBGetOperation="" PropertyGridFillOperation="" LogSendOperation="" ToLuaOperation="" FromLuaOperation="" CreateXLSColumnOperation="XLSRange[StartRow, StartCol + ColCount].Text = &quot;&lt;VariableName&gt;&quot;;&#13;&#10;XLSRange[StartRow + 1, StartCol + ColCount].Text = &quot;&lt;Type&gt;&quot; + &quot;[]&quot;;&#13;&#10;XLSRange[StartRow + 2, StartCol + ColCount].Text = &lt;Description&gt; + ConvertorTools.GetAdditionalDesc(&quot;&lt;VariableName&gt;&quot;, typeof(&lt;Type&gt;), true);&#13;&#10;ColCount++;&#13;&#10;" CheckXLSColumnOperation="if (ConvertorTools.ColumnNameToNumber(XLSRange,&quot;&lt;VariableName&gt;&quot;) &lt; 0)&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + &quot;列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}&#13;&#10;ColCount++;" ToXLSOperation="XLSRange[StartRow, StartCol + ColCount].Text = ConvertorTools.StructToString(&lt;Variable&gt;);&#13;&#10;ColCount++;&#13;&#10;" FromXLSOperation="Col = ConvertorTools.ColumnNameToNumber(XLSRange, &quot;&lt;VariableName&gt;&quot;);&#13;&#10;if (Col &gt;= 0)&#13;&#10;{&#13;&#10;&tab;if (XLSRange[StartRow, Col].HasFormula)&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].EnvalutedValue;&#13;&#10;&tab;else&#13;&#10;&tab;&tab;ValueStr = XLSRange[StartRow, Col].Value;&#13;&#10;&tab;if (!ConvertorTools.StringToStruct(ValueStr, &lt;Variable&gt;))&#13;&#10;&tab;{&#13;&#10;&tab;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;解析失败&quot;);&#13;&#10;&tab;&tab;return false;&#13;&#10;&tab;}&#13;&#10;}&#13;&#10;else&#13;&#10;{&#13;&#10;&tab;MessageBox.Show(MsgPrefix + $&quot;行{StartRow}列&lt;VariableName&gt;不存在&quot;);&#13;&#10;&tab;return false;&#13;&#10;}"/>
	<OtherConfig CommentPrefix="//" LocalVariableDefinePrefix="" MemberVariablePrefix="" DefaultPacketName="Packet" DefaultPacketMemberName="PacketMember" SupportBigInt="false" ForceExportAll="false"/>
</Config>
