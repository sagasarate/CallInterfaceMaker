[
    {
        "Name": "bool",
        "CType": "bool",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(byte))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tBoolean.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Boolean)\r\n{\r\n    <Variable> = (bool)ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Boolean)\r\n    {\r\n        <Variable> = (bool)StructNode[\"<VariableName>\"];\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable> = false;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Text = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!bool.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "char",
        "CType": "sbyte",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(sbyte))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tSByte.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (sbyte)((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (sbyte)((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!sbyte.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "short",
        "CType": "short",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(short))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tInt16.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (short)((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (short)((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!short.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "int",
        "CType": "int",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(int))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tInt32.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = ((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = ((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!int.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "BYTE",
        "CType": "byte",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(byte))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tByte.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (byte)((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (byte)((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!byte.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "WORD",
        "CType": "ushort",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(ushort))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt16.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (ushort)((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (ushort)((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!ushort.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "UINT",
        "CType": "uint",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(uint))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt32.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (uint)((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (uint)((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!uint.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "INT64",
        "CType": "long",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(long))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tInt64.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = ((long)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = ((long)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!long.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "UINT64",
        "CType": "ulong",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(ulong))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt64.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (ulong)((long)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (ulong)((long)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!ulong.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "String",
        "CType": "string",
        "Flag": 192,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetStringMemberSize(<Variable>)",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>;\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\t<Variable>=Attr<VariableName>.Value;\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.String)\r\n{\r\n    <Variable> = (string)ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.String)\r\n    {\r\n        <Variable> = (string)StructNode[\"<VariableName>\"];\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>=string.Empty",
            "InitOperation": "<Variable>=string.Empty;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Text = <Variable>;\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\t<Variable> = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\t<Variable> = XLSRange[StartRow, Col].Value;\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "CSmartStruct",
        "CType": "CSmartStruct",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>.CloneFrom(<PacketMember>);",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetStructMemberSize(<Variable>.GetDataLen())",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>=new <Type>()",
            "InitOperation": "",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>.CloneFrom(<RightValue><Variable>);\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>.CloneFrom(Value);\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "ColCount++;\r\n",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "OBJECT_ID",
        "CType": "OBJECT_ID",
        "Flag": 0,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>.ID)) FailCount++;",
            "UnpackOperation": "<Variable>.ID=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize((uint)Marshal.SizeOf(typeof(OBJECT_ID)))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ID.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt64.TryParse(Attr<VariableName>.Value,out <Variable>.ID);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>.ID);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>.ID;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable>.ID = (ulong)((long)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable>.ID = (ulong)((long)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>.ID=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "ColCount++;\r\n",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "float",
        "CType": "float",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(float))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tSingle.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Float)\r\n{\r\n    <Variable> = (float)((double)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Float)\r\n    {\r\n        <Variable> = (float)((double)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!float.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "ByteArray",
        "CType": "byte[]",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetBinaryMemberSize((uint)<Variable>.Length)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>=new byte[0]",
            "InitOperation": "",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "ColCount++;\r\n",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "TimeStamp",
        "CType": "uint",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(uint))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tUInt32.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Integer)\r\n{\r\n    <Variable> = (uint)((int)ArrayElementNode);\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Integer)\r\n    {\r\n        <Variable> = (uint)((int)StructNode[\"<VariableName>\"]);\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!uint.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "CSmartArray",
        "CType": "CSmartArray",
        "Flag": 196,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>.CloneFrom(<PacketMember>);",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetArrayMemberSize(<Variable>.GetDataLen())",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "",
            "FromJsonOperation": "",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>=new <Type>()",
            "InitOperation": "",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>.CloneFrom(<RightValue><Variable>);\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>.CloneFrom(Value);\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;\r\n",
            "ToXLSOperation": "ColCount++;\r\n",
            "FromXLSOperation": "",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "double",
        "CType": "double",
        "Flag": 64,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetFixMemberSize(sizeof(double))",
            "ToXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.OwnerDocument.CreateAttribute(\"<VariableName>\");\r\nAttr<VariableName>.Value = <Variable>.ToString();\r\nStructNode.Attributes.Append(Attr<VariableName>);",
            "FromXMLOperation": "XmlAttribute Attr<VariableName>=StructNode.Attributes[\"<VariableName>\"];\r\nif(Attr<VariableName>!=null)\r\n{\r\n\tDouble.TryParse(Attr<VariableName>.Value,out <Variable>);\r\n\t<IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>);\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>;\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\nif(ArrayElementNode.Type == JTokenType.Float)\r\n{\r\n    <Variable> = (double)ArrayElementNode;\r\n    <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}\r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n{\r\n    if(StructNode[\"<VariableName>\"].Type == JTokenType.Float)\r\n    {\r\n        <Variable> = (double)StructNode[\"<VariableName>\"];\r\n        <IfUpdateMF>UpdateFlag |= (ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n    }    \r\n}\r\n</IsArray>",
            "ReferenceDefine": "ref <Type>",
            "ReferenceUse": "ref <Variable>",
            "VariableDefine": "<Type><Space><Variable>",
            "InitOperation": "<Variable>=0;",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Value = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange, \"<VariableName>\");\r\nif (Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tif (!double.TryParse(ValueStr, out <Variable>))\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    },
    {
        "Name": "Variant",
        "CType": "CVariedValue",
        "Flag": 192,
        "GenerateOperations": {
            "PackOperation": "if(!<Packet>.AddMember(<IfNotInArray>(ushort)<SST_NAME>.<SST_ID>,</IfNotInArray><Variable>)) FailCount++;",
            "UnpackOperation": "<Variable>=<PacketMember>;",
            "SizeCaculateOperation": "<IfInArray>CSmartArray</IfInArray><IfNotInArray>CSmartStruct</IfNotInArray>.GetVariedMemberSize(<Variable>)",
            "ToXMLOperation": "",
            "FromXMLOperation": "",
            "ToJsonOperation": "<IsArray>\r\nArrayNode.Add(<Variable>.ToJson());\r\n<!IsArray>\r\nStructNode[\"<VariableName>\"] = <Variable>.ToJson();\r\n</IsArray>",
            "FromJsonOperation": "<IsArray>\r\n<Variable> = CVariedValue.FromJson(ArrayElementNode); \r\n<!IsArray>\r\nif (StructNode[\"<VariableName>\"] != null)\r\n\t<Variable> = CVariedValue.FromJson(StructNode[\"<VariableName>\"]); \r\n</IsArray>",
            "ReferenceDefine": "<Type>",
            "ReferenceUse": "<Variable>",
            "VariableDefine": "<Type><Space><Variable>=new <Type>()",
            "InitOperation": "",
            "CloneOperation": "<IfInDataObject>if((Flag&(ulong)<ModifyFlagEnumName>.<ModifyFlag>)!=0)</IfInDataObject>\r\n{\r\n\t<LeftValue><Variable>=<RightValue><Variable>;\r\n\t<IfInDataObject><IfUpdateMF>UpdateFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF></IfInDataObject>\r\n}",
            "GetMethodDeclare": "",
            "GetMethodDefine": "public <Type> Get<VariableName>()\r\n{\r\n\treturn <Variable>;\r\n}",
            "SetMethodDeclare": "",
            "SetMethodDefine": "public void Set<VariableName>(<Type> Value)\r\n{\r\n\t<Variable>=Value;\r\n\t<IfUpdateMF>m_ModifyFlag|=(ulong)<ModifyFlagEnumName>.<ModifyFlag>;</IfUpdateMF>\r\n}",
            "IndexOperation": "",
            "ConstIndexOperation": "",
            "ToStringOperation": "",
            "DBFieldDefineOperation": "",
            "DBInsertFormatOperation": "",
            "DBPutOperation": "",
            "DBGetOperation": "",
            "FileLogFillOperation": "",
            "AliLogSendOperation": "",
            "ToLuaOperation": "",
            "FromLuaOperation": "",
            "CreateXLSColumnOperation": "XLSRange[StartRow, StartCol + ColCount].Text = \"<VariableName>\";\r\nXLSRange[StartRow + 1, StartCol + ColCount].Text = \"<Type>\";\r\nXLSRange[StartRow + 2, StartCol + ColCount].Text = <Description>;\r\nColCount++;\r\n",
            "CheckXLSColumnOperation": "if (ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\") < 0)\r\n{\r\n\tMessageBox.Show(MsgPrefix + \"列<VariableName>不存在\");\r\n\treturn false;\r\n}\r\nColCount++;",
            "ToXLSOperation": "XLSRange[StartRow, StartCol + ColCount].Text = <Variable>.ToString();\r\nColCount++;\r\n",
            "FromXLSOperation": "Col = ConvertorTools.ColumnNameToNumber(XLSRange,\"<VariableName>\");\r\nif(Col >= 0)\r\n{\r\n\tif (XLSRange[StartRow, Col].HasFormula)\r\n\t\tValueStr = XLSRange[StartRow, Col].EnvalutedValue;\r\n\telse\r\n\t\tValueStr = XLSRange[StartRow, Col].Value;\r\n\tCVariedValue VariedValue = CVariedValue.FromString(ValueStr, 4);\r\n\tif(VariedValue != null)\r\n\t{\r\n\t\t<Variable> = VariedValue;\r\n\t}\r\n\telse\r\n\t{\r\n\t\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>解析失败\");\r\n\t\treturn false;\r\n\t}\r\n}\r\nelse\r\n{\r\n\tMessageBox.Show(MsgPrefix + $\"行{StartRow}列<VariableName>不存在\");\r\n\treturn false;\r\n}",
            "FormatSpecOperation": ""
        }
    }
]