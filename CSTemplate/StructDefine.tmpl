<Description>
public class <StructName><IfHaveBaseClass>:</IfHaveBaseClass><BaseStruct>
{
	<Members>
	<SSTIDEnumDefine>
	public <StructName>()
	{
		Clear();
	}
	public <IfHaveBaseClass>new </IfHaveBaseClass>void Clear()
	{
		<IfHaveBaseClass>
		base.Clear();
		</IfHaveBaseClass>
		<InitOperations>
	}
	public <IfHaveBaseClass>new </IfHaveBaseClass>bool MakePacket(CSmartStruct Packet)
	{
		uint FailCount=0;

		<IfHaveBaseClass>
		if(!base.MakePacket(Packet))
			FailCount++;
		</IfHaveBaseClass>

		<PackOperations>

		return FailCount==0;
	}
	public <IfHaveBaseClass>new </IfHaveBaseClass>bool ParsePacket(CSmartStruct Packet)
	{
		<IfHaveBaseClass>
		base.ParsePacket(Packet);
		</IfHaveBaseClass>
		<IfHaveMember>
		int Pos=Packet.GetFirstMemberPosition();
		while(Pos>0)
		{
			ushort MemberID=0;
			CSmartValue PacketMember=Packet.GetNextMember(ref Pos,ref MemberID);
			switch(MemberID)
			{
			<UnpackOperations>
			}
		}
		</IfHaveMember>
		return true;
	}
	public <IfHaveBaseClass>new </IfHaveBaseClass>uint GetSmartStructSize()
	{
		uint _PackSize = 0;
		<IfHaveBaseClass>
		_PackSize += base.GetSmartStructSize();
		</IfHaveBaseClass>
		<PacketSizes>
		return _PackSize;
	}
	public void CloneFrom(<StructName> Value)
	{
		<IfHaveBaseClass>
		base.CloneFrom(Value);
		</IfHaveBaseClass>
		<CloneFromOperations>
	}
	public <IfHaveBaseClass>new </IfHaveBaseClass><StructName> Clone()
	{
		<StructName> CloneObject=new <StructName>();
		CloneObject.CloneFrom(this);
		return CloneObject;
	}
	<XMLProcess>
	<JsonProcess>
	<XLSProcess>
};

